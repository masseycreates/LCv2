{"version":3,"file":"lottery-Dl5XWKmO.js","sources":["../../src/utils/constants.js","../../src/utils/helpers.js","../../src/services/LotteryPredictor.js"],"sourcesContent":["// LCv2 Constants and Configuration - Centralized App Settings\r\n\r\n// ===========================================================================\r\n// APPLICATION CONFIGURATION\r\n// ===========================================================================\r\n\r\nexport const APP_CONFIG = {\r\n  name: 'LCv2 - Advanced Lottery Intelligence System',\r\n  version: '2.0.0',\r\n  description: 'Claude Sonnet 4 + 6 Algorithms Hybrid Architecture',\r\n  author: 'LCv2 Development Team',\r\n  maxRetries: 3,\r\n  cacheTimeout: 1800000, // 30 minutes in milliseconds\r\n  requestTimeout: 10000,  // 10 seconds\r\n  maxHistoricalRecords: 2000,\r\n  minHistoricalRecords: 50,\r\n  environment: typeof import.meta !== 'undefined' ? import.meta.env.MODE : 'development'\r\n};\r\n\r\n// ===========================================================================\r\n// API ENDPOINTS & CONFIGURATION\r\n// ===========================================================================\r\n\r\nexport const API_ENDPOINTS = {\r\n  // Primary data sources\r\n  powerball: '/api/powerball',\r\n  history: '/api/powerball-history',\r\n  claude: '/api/claude',\r\n  \r\n  // Diagnostic endpoints\r\n  test: '/api/test',\r\n  diagnose: '/api/diagnose',\r\n  status: '/api/status',\r\n  \r\n  // External data sources (fallback)\r\n  nyLottery: 'https://data.ny.gov/resource/5xaw-6ayf.json',\r\n  powerballCom: 'https://www.powerball.com/api',\r\n  lotteryUSA: 'https://www.lotteryusa.com/api',\r\n  \r\n  // CDN resources\r\n  tailwindCDN: 'https://cdn.tailwindcss.com'\r\n};\r\n\r\n// ===========================================================================\r\n// CLAUDE AI CONFIGURATION\r\n// ===========================================================================\r\n\r\nexport const CLAUDE_CONFIG = {\r\n  model: 'claude-3-sonnet-20240229', // Claude Sonnet 4 model identifier\r\n  fallbackModel: 'claude-3-haiku-20240307',\r\n  version: '2023-06-01',\r\n  \r\n  maxTokens: {\r\n    hybrid: 2000,        // For complex hybrid analysis\r\n    quick: 1500,         // For quick selections\r\n    insights: 800,       // For prediction insights\r\n    test: 100           // For connection testing\r\n  },\r\n  \r\n  temperature: 0.3,      // Lower = more focused, Higher = more creative\r\n  topP: 0.9,            // Nucleus sampling parameter\r\n  \r\n  retryConfig: {\r\n    maxRetries: 3,\r\n    baseDelay: 1000,     // 1 second base delay\r\n    maxDelay: 10000,     // 10 second max delay\r\n    exponentialBackoff: true\r\n  },\r\n  \r\n  rateLimits: {\r\n    requestsPerMinute: 30,\r\n    requestsPerHour: 1000,\r\n    tokensPerMinute: 40000\r\n  }\r\n};\r\n\r\n// ===========================================================================\r\n// LOTTERY RULES & CONSTRAINTS\r\n// ===========================================================================\r\n\r\nexport const LOTTERY_RULES = {\r\n  mainNumbers: {\r\n    min: 1,\r\n    max: 69,\r\n    count: 5,\r\n    sumRange: {\r\n      min: 75,           // Theoretical minimum sum (1+2+3+4+5)\r\n      max: 325,          // Theoretical maximum sum (65+66+67+68+69)\r\n      optimal: {\r\n        min: 100,        // Practical minimum for balanced selection\r\n        max: 275         // Practical maximum for balanced selection\r\n      }\r\n    }\r\n  },\r\n  \r\n  powerball: {\r\n    min: 1,\r\n    max: 26,\r\n    count: 1\r\n  },\r\n  \r\n  drawings: {\r\n    daysOfWeek: [1, 3, 6],        // Monday, Wednesday, Saturday (0=Sunday)\r\n    drawingTime: {\r\n      hour: 22,                    // 10 PM\r\n      minute: 59,                  // 10:59 PM\r\n      timezone: 'America/New_York' // Eastern Time\r\n    },\r\n    frequency: 'bi-weekly'         // Approximately twice per week\r\n  },\r\n  \r\n  validation: {\r\n    allowDuplicates: false,\r\n    requireSorted: false,         // We'll sort them automatically\r\n    enforceRange: true\r\n  }\r\n};\r\n\r\n// ===========================================================================\r\n// ALGORITHM CONFIGURATION\r\n// ===========================================================================\r\n\r\nexport const ALGORITHM_CONFIG = {\r\n  ewmaAlpha: 0.3,                // EWMA decay factor (0-1, higher = more recent weight)\r\n  performanceWindow: 50,         // Number of predictions to track for performance\r\n  confidenceRange: {\r\n    min: 65,\r\n    max: 95\r\n  },\r\n  \r\n  algorithms: [\r\n    {\r\n      id: 'ewma',\r\n      name: 'EWMA Frequency Consensus',\r\n      weight: 0.2,\r\n      description: 'Exponentially Weighted Moving Average frequency analysis with recent trend weighting',\r\n      category: 'frequency',\r\n      complexity: 'medium'\r\n    },\r\n    {\r\n      id: 'neural',\r\n      name: 'Neural Network Pattern Recognition',\r\n      weight: 0.17,\r\n      description: 'Multi-layer neural network analyzing positional patterns and feature extraction',\r\n      category: 'pattern',\r\n      complexity: 'high'\r\n    },\r\n    {\r\n      id: 'pairs',\r\n      name: 'Pair Relationship Analysis',\r\n      weight: 0.18,\r\n      description: 'Co-occurrence pattern analysis identifying number pair relationships and clustering',\r\n      category: 'relationship',\r\n      complexity: 'medium'\r\n    },\r\n    {\r\n      id: 'gaps',\r\n      name: 'Gap Pattern Optimization',\r\n      weight: 0.16,\r\n      description: 'Overdue number identification using gap pattern analysis and statistical distribution',\r\n      category: 'temporal',\r\n      complexity: 'medium'\r\n    },\r\n    {\r\n      id: 'markov',\r\n      name: 'Markov Chain Transition',\r\n      weight: 0.14,\r\n      description: 'State transition analysis predicting next numbers based on sequence patterns',\r\n      category: 'sequential',\r\n      complexity: 'high'\r\n    },\r\n    {\r\n      id: 'sum',\r\n      name: 'Sum Range Optimization',\r\n      weight: 0.15,\r\n      description: 'Sum distribution analysis targeting optimal total ranges based on historical patterns',\r\n      category: 'mathematical',\r\n      complexity: 'low'\r\n    }\r\n  ],\r\n  \r\n  ensemble: {\r\n    votingMethod: 'weighted',     // 'weighted', 'majority', 'rank'\r\n    diversityBonus: 0.1,         // Bonus for algorithms that produce diverse results\r\n    performanceDecay: 0.95       // How quickly to forget old performance data\r\n  }\r\n};\r\n\r\n// ===========================================================================\r\n// UI CONFIGURATION & THEMES\r\n// ===========================================================================\r\n\r\nexport const UI_CONFIG = {\r\n  theme: {\r\n    primary: '#3b82f6',          // Blue\r\n    secondary: '#6b7280',        // Gray\r\n    success: '#10b981',          // Green\r\n    warning: '#f59e0b',          // Orange/Yellow\r\n    error: '#ef4444',            // Red\r\n    claude: '#8b5cf6',           // Purple for Claude AI\r\n    \r\n    gradients: {\r\n      primary: 'linear-gradient(135deg, #8b5cf6 0%, #3b82f6 30%, #10b981 60%, #f59e0b 100%)',\r\n      claude: 'linear-gradient(135deg, #8b5cf6 0%, #3b82f6 100%)',\r\n      unavailable: 'linear-gradient(135deg, #6b7280 0%, #9ca3af 50%, #d1d5db 100%)'\r\n    }\r\n  },\r\n  \r\n  animations: {\r\n    duration: {\r\n      fast: '0.2s',\r\n      normal: '0.3s',\r\n      slow: '0.5s'\r\n    },\r\n    easing: 'cubic-bezier(0.4, 0, 0.2, 1)'\r\n  },\r\n  \r\n  breakpoints: {\r\n    sm: '640px',\r\n    md: '768px',\r\n    lg: '1024px',\r\n    xl: '1280px'\r\n  },\r\n  \r\n  layout: {\r\n    maxWidth: '1280px',\r\n    padding: '1rem',\r\n    cardBorderRadius: '12px',\r\n    buttonBorderRadius: '8px'\r\n  }\r\n};\r\n\r\n// ===========================================================================\r\n// TAX CALCULATION CONSTANTS\r\n// ===========================================================================\r\n\r\nexport const TAX_CONFIG = {\r\n  federal: {\r\n    withholding: 0.24,           // 24% automatic withholding for lottery winnings over $5,000\r\n    brackets2024: {\r\n      single: [\r\n        { min: 0, max: 11000, rate: 0.10 },\r\n        { min: 11000, max: 44725, rate: 0.12 },\r\n        { min: 44725, max: 95375, rate: 0.22 },\r\n        { min: 95375, max: 182050, rate: 0.24 },\r\n        { min: 182050, max: 231250, rate: 0.32 },\r\n        { min: 231250, max: 578125, rate: 0.35 },\r\n        { min: 578125, max: Infinity, rate: 0.37 }\r\n      ],\r\n      married: [\r\n        { min: 0, max: 22000, rate: 0.10 },\r\n        { min: 22000, max: 89450, rate: 0.12 },\r\n        { min: 89450, max: 190750, rate: 0.22 },\r\n        { min: 190750, max: 364200, rate: 0.24 },\r\n        { min: 364200, max: 462500, rate: 0.32 },\r\n        { min: 462500, max: 693750, rate: 0.35 },\r\n        { min: 693750, max: Infinity, rate: 0.37 }\r\n      ]\r\n    }\r\n  },\r\n  \r\n  state: {\r\n    // Common state tax rates for lottery winnings\r\n    rates: {\r\n      'no_tax': 0.0,             // AL, AK, FL, NV, NH, SD, TN, TX, WA, WY\r\n      'california': 0.133,        // Highest state tax\r\n      'new_york': 0.1082,\r\n      'pennsylvania': 0.0307,\r\n      'illinois': 0.0495,\r\n      'ohio': 0.0399,\r\n      'michigan': 0.0425,\r\n      'georgia': 0.0575,\r\n      'north_carolina': 0.0499,\r\n      'arizona': 0.045,\r\n      'colorado': 0.0455\r\n    }\r\n  },\r\n  \r\n  calculations: {\r\n    lumpSumRatio: 0.6,          // Typical lump sum is ~60% of advertised jackpot\r\n    annuityYears: 30,           // Standard 30-year annuity\r\n    inflationRate: 0.03,        // 3% average inflation assumption\r\n    investmentReturn: 0.07      // 7% average investment return assumption\r\n  }\r\n};\r\n\r\n// ===========================================================================\r\n// ERROR MESSAGES & USER FEEDBACK\r\n// ===========================================================================\r\n\r\nexport const ERROR_MESSAGES = {\r\n  // API & Connection Errors\r\n  networkError: 'Network connection failed. Please check your internet connection.',\r\n  apiKeyRequired: 'Anthropic API key is required for Claude AI features.',\r\n  invalidApiKey: 'Invalid API key format. Please check your Anthropic API key.',\r\n  rateLimitExceeded: 'Rate limit exceeded. Please wait before making another request.',\r\n  serverError: 'Server error occurred. Please try again later.',\r\n  \r\n  // Data Validation Errors\r\n  invalidNumbers: 'Please select exactly 5 numbers between 1 and 69.',\r\n  invalidPowerball: 'Please select a Powerball number between 1 and 26.',\r\n  duplicateNumbers: 'Duplicate numbers are not allowed.',\r\n  invalidJackpot: 'Please enter a valid jackpot amount (minimum $1,000,000).',\r\n  \r\n  // Algorithm Errors\r\n  algorithmFailed: 'Algorithm calculation failed. Using fallback method.',\r\n  insufficientData: 'Insufficient historical data for analysis.',\r\n  predictionFailed: 'Prediction generation failed. Please try again.',\r\n  \r\n  // General Errors\r\n  unexpectedError: 'An unexpected error occurred. Please refresh and try again.',\r\n  dataCorrupted: 'Data integrity check failed. Please refresh the application.',\r\n  featureUnavailable: 'This feature is temporarily unavailable.'\r\n};\r\n\r\nexport const SUCCESS_MESSAGES = {\r\n  // Data & API Success\r\n  dataLoaded: 'Lottery data loaded successfully.',\r\n  dataRefreshed: 'Data refreshed successfully.',\r\n  claudeEnabled: 'Claude Sonnet 4 connected successfully.',\r\n  \r\n  // User Actions\r\n  selectionSaved: 'Number selection saved successfully.',\r\n  selectionCopied: 'Selection copied to clipboard.',\r\n  calculationComplete: 'Tax calculation completed.',\r\n  \r\n  // System Operations\r\n  systemInitialized: 'LCv2 system initialized successfully.',\r\n  predictionsGenerated: 'Predictions generated successfully.',\r\n  analysisComplete: 'Analysis completed successfully.'\r\n};\r\n\r\nexport const WARNING_MESSAGES = {\r\n  // Data Quality Warnings\r\n  limitedData: 'Limited historical data available. Results may be less accurate.',\r\n  offlineMode: 'Operating in offline mode. Using cached data.',\r\n  fallbackData: 'Live data unavailable. Using fallback data.',\r\n  \r\n  // Feature Warnings\r\n  claudeDisabled: 'Claude AI features disabled. Using local algorithms only.',\r\n  expertMode: 'Expert mode enabled. Advanced features available.',\r\n  betaFeature: 'This is a beta feature. Results may vary.',\r\n  \r\n  // Performance Warnings\r\n  slowConnection: 'Slow network detected. Some features may be delayed.',\r\n  highMemoryUsage: 'High memory usage detected. Consider refreshing the app.'\r\n};\r\n\r\n// ===========================================================================\r\n// FEATURE FLAGS & EXPERIMENTAL SETTINGS\r\n// ===========================================================================\r\n\r\nexport const FEATURE_FLAGS = {\r\n  // AI Features\r\n  claudeIntegration: true,\r\n  hybridPredictions: true,\r\n  advancedInsights: true,\r\n  \r\n  // Algorithm Features\r\n  neuralNetworks: true,\r\n  markovChains: true,\r\n  ensembleLearning: true,\r\n  \r\n  // UI Features\r\n  darkMode: false,              // Not implemented yet\r\n  animations: true,\r\n  mobileOptimizations: true,\r\n  \r\n  // Data Features\r\n  realTimeData: true,\r\n  historicalAnalysis: true,\r\n  patternRecognition: true,\r\n  \r\n  // Experimental Features\r\n  quantumAlgorithms: false,     // Future feature\r\n  blockchainIntegration: false, // Future feature\r\n  socialFeatures: false         // Future feature\r\n};\r\n\r\n// ===========================================================================\r\n// PERFORMANCE & MONITORING\r\n// ===========================================================================\r\n\r\nexport const PERFORMANCE_CONFIG = {\r\n  // Monitoring thresholds\r\n  thresholds: {\r\n    apiResponseTime: 5000,      // 5 seconds\r\n    memoryUsage: 100,           // 100MB\r\n    errorRate: 0.05,            // 5%\r\n    cacheHitRate: 0.8           // 80%\r\n  },\r\n  \r\n  // Optimization settings\r\n  optimization: {\r\n    enableCaching: true,\r\n    enableCompression: true,\r\n    enableLazyLoading: true,\r\n    enablePreloading: false\r\n  },\r\n  \r\n  // Logging levels\r\n  logging: {\r\n    level: APP_CONFIG.environment === 'development' ? 'debug' : 'info',\r\n    enableConsoleLogging: true,\r\n    enableRemoteLogging: false,\r\n    enablePerformanceLogging: true\r\n  }\r\n};\r\n\r\n// ===========================================================================\r\n// ACCESSIBILITY & INTERNATIONALIZATION\r\n// ===========================================================================\r\n\r\nexport const ACCESSIBILITY_CONFIG = {\r\n  // ARIA labels and roles\r\n  labels: {\r\n    numberSelection: 'Select lottery numbers',\r\n    powerballSelection: 'Select Powerball number',\r\n    generatePredictions: 'Generate AI predictions',\r\n    calculateTaxes: 'Calculate tax breakdown'\r\n  },\r\n  \r\n  // Keyboard navigation\r\n  keyboard: {\r\n    enableTabNavigation: true,\r\n    enableArrowKeyNavigation: true,\r\n    enableEnterToActivate: true\r\n  },\r\n  \r\n  // Screen reader support\r\n  screenReader: {\r\n    announceUpdates: true,\r\n    describeNumbers: true,\r\n    explainAlgorithms: true\r\n  }\r\n};\r\n\r\nexport const I18N_CONFIG = {\r\n  defaultLocale: 'en-US',\r\n  supportedLocales: ['en-US'],  // Future: add more languages\r\n  dateFormat: 'MM/dd/yyyy',\r\n  timeFormat: 'h:mm a',\r\n  numberFormat: 'en-US',\r\n  currencyFormat: 'USD'\r\n};\r\n\r\n// ===========================================================================\r\n// DEVELOPMENT & DEBUGGING\r\n// ===========================================================================\r\n\r\nexport const DEBUG_CONFIG = {\r\n  enabled: APP_CONFIG.environment === 'development',\r\n  \r\n  // Debug features\r\n  features: {\r\n    showAlgorithmDetails: true,\r\n    showPerformanceMetrics: true,\r\n    showApiRequests: true,\r\n    showStateChanges: false,    // Can be verbose\r\n    mockApiResponses: false     // For testing without API\r\n  },\r\n  \r\n  // Test data\r\n  testData: {\r\n    generateMockHistoricalData: true,\r\n    mockJackpotAmount: 100000000,\r\n    mockApiResponses: false\r\n  }\r\n};\r\n\r\n// ===========================================================================\r\n// EXPORT ALL CONFIGURATIONS\r\n// ===========================================================================\r\n\r\nexport default {\r\n  APP_CONFIG,\r\n  API_ENDPOINTS,\r\n  CLAUDE_CONFIG,\r\n  LOTTERY_RULES,\r\n  ALGORITHM_CONFIG,\r\n  UI_CONFIG,\r\n  TAX_CONFIG,\r\n  ERROR_MESSAGES,\r\n  SUCCESS_MESSAGES,\r\n  WARNING_MESSAGES,\r\n  FEATURE_FLAGS,\r\n  PERFORMANCE_CONFIG,\r\n  ACCESSIBILITY_CONFIG,\r\n  I18N_CONFIG,\r\n  DEBUG_CONFIG\r\n};\r\n\r\n// ===========================================================================\r\n// RUNTIME CONFIGURATION VALIDATION\r\n// ===========================================================================\r\n\r\n// Validate critical configuration on import\r\nif (typeof window !== 'undefined') {\r\n  // Browser environment validation\r\n  console.log('?? LCv2 Configuration loaded');\r\n  console.log(`?? Version: ${APP_CONFIG.version}`);\r\n  console.log(`??? Environment: ${APP_CONFIG.environment}`);\r\n  console.log(`?? Algorithms: ${ALGORITHM_CONFIG.algorithms.length} configured`);\r\n  console.log(`?? Claude Model: ${CLAUDE_CONFIG.model}`);\r\n  \r\n  // Validate essential features\r\n  const essentialFeatures = ['claudeIntegration', 'hybridPredictions', 'realTimeData'];\r\n  const enabledFeatures = essentialFeatures.filter(feature => FEATURE_FLAGS[feature]);\r\n  \r\n  if (enabledFeatures.length !== essentialFeatures.length) {\r\n    console.warn('?? Some essential features are disabled:', \r\n      essentialFeatures.filter(f => !FEATURE_FLAGS[f])\r\n    );\r\n  }\r\n  \r\n  // Environment-specific warnings\r\n  if (APP_CONFIG.environment === 'development') {\r\n    console.log('?? Development mode: Additional debugging features enabled');\r\n  }\r\n}","// LCv2 Utility Helper Functions - Comprehensive Function Library\n\nimport { LOTTERY_RULES, TAX_CONFIG, APP_CONFIG } from './constants.js';\n\n// ===========================================================================\n// NUMBER VALIDATION FUNCTIONS\n// ===========================================================================\n\nexport const isValidMainNumber = (num) => {\n  return Number.isInteger(num) && \n         num >= LOTTERY_RULES.mainNumbers.min && \n         num <= LOTTERY_RULES.mainNumbers.max;\n};\n\nexport const isValidPowerball = (num) => {\n  return Number.isInteger(num) && \n         num >= LOTTERY_RULES.powerball.min && \n         num <= LOTTERY_RULES.powerball.max;\n};\n\nexport const isValidPowerballNumbers = (numbers, powerball) => {\n  // Validate numbers array\n  if (!Array.isArray(numbers) || numbers.length !== LOTTERY_RULES.mainNumbers.count) {\n    return false;\n  }\n  \n  // Validate powerball\n  if (!isValidPowerball(powerball)) {\n    return false;\n  }\n  \n  // Validate each main number\n  for (const num of numbers) {\n    if (!isValidMainNumber(num)) {\n      return false;\n    }\n  }\n  \n  // Check for duplicates\n  const uniqueNumbers = new Set(numbers);\n  return uniqueNumbers.size === LOTTERY_RULES.mainNumbers.count;\n};\n\nexport const validateNumberSum = (numbers) => {\n  if (!Array.isArray(numbers) || numbers.length !== 5) return false;\n  \n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const { sumRange } = LOTTERY_RULES.mainNumbers;\n  \n  return sum >= sumRange.min && sum <= sumRange.max;\n};\n\nexport const validateNumberDistribution = (numbers) => {\n  if (!Array.isArray(numbers) || numbers.length !== 5) return false;\n  \n  const evenCount = numbers.filter(num => num % 2 === 0).length;\n  const lowCount = numbers.filter(num => num <= 35).length;\n  const range = Math.max(...numbers) - Math.min(...numbers);\n  \n  return {\n    isValid: evenCount >= 1 && evenCount <= 4 && lowCount >= 1 && lowCount <= 4,\n    evenCount,\n    oddCount: 5 - evenCount,\n    lowCount,\n    highCount: 5 - lowCount,\n    range,\n    sum: numbers.reduce((a, b) => a + b, 0)\n  };\n};\n\n// ===========================================================================\n// FORMATTING FUNCTIONS\n// ===========================================================================\n\nexport const formatJackpot = (amount) => {\n  if (!amount || amount <= 0) return '$0';\n  \n  if (amount >= 1000000000) {\n    return `$${(amount / 1000000000).toFixed(1)}B`;\n  } else if (amount >= 1000000) {\n    return `$${Math.round(amount / 1000000)}M`;\n  } else if (amount >= 1000) {\n    return `$${Math.round(amount / 1000)}K`;\n  } else {\n    return `$${Math.round(amount)}`;\n  }\n};\n\nexport const formatCurrency = (amount, options = {}) => {\n  const defaultOptions = {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  };\n  \n  const formatOptions = { ...defaultOptions, ...options };\n  \n  try {\n    return new Intl.NumberFormat('en-US', formatOptions).format(amount);\n  } catch (error) {\n    // Fallback for older browsers\n    return `$${Math.round(amount).toLocaleString()}`;\n  }\n};\n\nexport const formatPercentage = (rate, decimals = 2) => {\n  if (typeof rate !== 'number' || isNaN(rate)) return '0%';\n  return `${rate.toFixed(decimals)}%`;\n};\n\nexport const formatNumbers = (numbers, powerball) => {\n  if (!numbers || !powerball) return 'Invalid selection';\n  \n  try {\n    const sortedNumbers = [...numbers].sort((a, b) => a - b);\n    return `${sortedNumbers.join(', ')} | PB: ${powerball}`;\n  } catch (error) {\n    return 'Format error';\n  }\n};\n\nexport const formatDate = (date, options = {}) => {\n  const defaultOptions = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  };\n  \n  const formatOptions = { ...defaultOptions, ...options };\n  \n  try {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    return dateObj.toLocaleDateString('en-US', formatOptions);\n  } catch (error) {\n    return 'Invalid date';\n  }\n};\n\nexport const formatTime = (date, options = {}) => {\n  const defaultOptions = {\n    hour: 'numeric',\n    minute: '2-digit',\n    timeZoneName: 'short'\n  };\n  \n  const formatOptions = { ...defaultOptions, ...options };\n  \n  try {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    return dateObj.toLocaleTimeString('en-US', formatOptions);\n  } catch (error) {\n    return 'Invalid time';\n  }\n};\n\n// ===========================================================================\n// DATE AND TIME FUNCTIONS\n// ===========================================================================\n\nexport const calculateNextDrawing = () => {\n  try {\n    const now = new Date();\n    const etNow = new Date(now.toLocaleString(\"en-US\", {timeZone: \"America/New_York\"}));\n    \n    const dayOfWeek = etNow.getDay();\n    const hour = etNow.getHours();\n    const minute = etNow.getMinutes();\n    \n    const { daysOfWeek, drawingTime } = LOTTERY_RULES.drawings;\n    \n    let nextDrawingDate = new Date(etNow);\n    let found = false;\n    \n    // Check if today is a drawing day and we haven't passed the time\n    if (daysOfWeek.includes(dayOfWeek)) {\n      const todayDrawingTime = new Date(etNow);\n      todayDrawingTime.setHours(drawingTime.hour, drawingTime.minute, 0, 0);\n      \n      if (etNow <= todayDrawingTime) {\n        nextDrawingDate = todayDrawingTime;\n        found = true;\n      }\n    }\n    \n    // Find next drawing day\n    if (!found) {\n      let daysToAdd = 1;\n      \n      while (daysToAdd <= 7 && !found) {\n        const checkDate = new Date(etNow);\n        checkDate.setDate(etNow.getDate() + daysToAdd);\n        checkDate.setHours(drawingTime.hour, drawingTime.minute, 0, 0);\n        \n        const checkDay = checkDate.getDay();\n        \n        if (daysOfWeek.includes(checkDay)) {\n          nextDrawingDate = checkDate;\n          found = true;\n        }\n        \n        daysToAdd++;\n      }\n    }\n    \n    const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const nextDrawingDayName = dayNames[nextDrawingDate.getDay()];\n    \n    return {\n      date: nextDrawingDate.toLocaleDateString('en-US', { \n        weekday: 'short', \n        month: 'short', \n        day: 'numeric',\n        year: 'numeric',\n        timeZone: 'America/New_York'\n      }),\n      time: '10:59 PM ET',\n      dayOfWeek: nextDrawingDayName,\n      timestamp: nextDrawingDate.toISOString(),\n      daysUntil: Math.ceil((nextDrawingDate - etNow) / (1000 * 60 * 60 * 24))\n    };\n    \n  } catch (error) {\n    console.error('Next drawing calculation failed:', error.message);\n    return {\n      date: 'Check powerball.com',\n      time: '10:59 PM ET',\n      dayOfWeek: 'Mon/Wed/Sat',\n      timestamp: null,\n      daysUntil: null\n    };\n  }\n};\n\nexport const getTimeSince = (date) => {\n  try {\n    const now = new Date();\n    const targetDate = typeof date === 'string' ? new Date(date) : date;\n    const diffMs = now - targetDate;\n    \n    const diffSeconds = Math.floor(diffMs / 1000);\n    const diffMinutes = Math.floor(diffSeconds / 60);\n    const diffHours = Math.floor(diffMinutes / 60);\n    const diffDays = Math.floor(diffHours / 24);\n    \n    if (diffDays > 0) return `${diffDays} day${diffDays === 1 ? '' : 's'} ago`;\n    if (diffHours > 0) return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;\n    if (diffMinutes > 0) return `${diffMinutes} minute${diffMinutes === 1 ? '' : 's'} ago`;\n    return 'Just now';\n    \n  } catch (error) {\n    return 'Unknown';\n  }\n};\n\nexport const isWithinTimeRange = (date, hours = 24) => {\n  try {\n    const now = new Date();\n    const targetDate = typeof date === 'string' ? new Date(date) : date;\n    const diffMs = now - targetDate;\n    const diffHours = diffMs / (1000 * 60 * 60);\n    \n    return diffHours <= hours && diffHours >= 0;\n  } catch (error) {\n    return false;\n  }\n};\n\n// ===========================================================================\n// DATA VALIDATION FUNCTIONS\n// ===========================================================================\n\nexport const validateHistoricalData = (drawings) => {\n  if (!Array.isArray(drawings) || drawings.length < 10) {\n    return false;\n  }\n  \n  const validDrawings = drawings.filter(drawing => {\n    return drawing.date && \n           drawing.numbers && \n           drawing.powerball &&\n           isValidPowerballNumbers(drawing.numbers, drawing.powerball);\n  });\n  \n  const validityRatio = validDrawings.length / drawings.length;\n  return validityRatio >= 0.8; // At least 80% valid data\n};\n\nexport const validateJackpotData = (data) => {\n  if (!data || typeof data !== 'object') return false;\n  \n  const amount = data.amount || data.jackpot;\n  const cashValue = data.cashValue || data.cash_value;\n  \n  // Validate amount\n  if (!amount || amount < 20000000 || amount > 5000000000) return false;\n  \n  // Validate cash value if present\n  if (cashValue) {\n    if (cashValue < 10000000 || cashValue > 3000000000) return false;\n    if (cashValue >= amount) return false;\n    \n    const ratio = cashValue / amount;\n    if (ratio < 0.4 || ratio > 0.8) return false;\n  }\n  \n  return true;\n};\n\nexport const validateApiResponse = (response, expectedStructure = {}) => {\n  if (!response || typeof response !== 'object') return false;\n  \n  // Check required fields\n  for (const [key, type] of Object.entries(expectedStructure)) {\n    if (!(key in response)) return false;\n    if (type && typeof response[key] !== type) return false;\n  }\n  \n  return true;\n};\n\n// ===========================================================================\n// API KEY VALIDATION\n// ===========================================================================\n\nexport const validateApiKey = (key) => {\n  return key && \n         typeof key === 'string' && \n         key.startsWith('sk-ant-') && \n         key.length > 20 &&\n         key.length < 200;\n};\n\nexport const maskApiKey = (key) => {\n  if (!key || typeof key !== 'string') return '';\n  if (key.length < 12) return '***';\n  \n  return key.substring(0, 7) + '...' + key.substring(key.length - 4);\n};\n\n// ===========================================================================\n// RANDOM NUMBER GENERATION\n// ===========================================================================\n\nexport const generateQuickPick = () => {\n  const numbers = [];\n  while (numbers.length < LOTTERY_RULES.mainNumbers.count) {\n    const num = Math.floor(Math.random() * LOTTERY_RULES.mainNumbers.max) + 1;\n    if (!numbers.includes(num)) {\n      numbers.push(num);\n    }\n  }\n  \n  const powerball = Math.floor(Math.random() * LOTTERY_RULES.powerball.max) + 1;\n  \n  return {\n    numbers: numbers.sort((a, b) => a - b),\n    powerball,\n    timestamp: new Date().toISOString()\n  };\n};\n\nexport const generateRandomInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const generateWeightedRandom = (items, weights) => {\n  if (!Array.isArray(items) || !Array.isArray(weights) || items.length !== weights.length) {\n    throw new Error('Items and weights arrays must have the same length');\n  }\n  \n  const totalWeight = weights.reduce((sum, weight) => sum + weight, 0);\n  const randomValue = Math.random() * totalWeight;\n  \n  let cumulativeWeight = 0;\n  for (let i = 0; i < items.length; i++) {\n    cumulativeWeight += weights[i];\n    if (randomValue <= cumulativeWeight) {\n      return items[i];\n    }\n  }\n  \n  return items[items.length - 1]; // Fallback\n};\n\n// ===========================================================================\n// CONFIDENCE AND SCORING HELPERS\n// ===========================================================================\n\nexport const getConfidenceClass = (confidence) => {\n  if (confidence >= 85) return 'confidence-high';\n  if (confidence >= 75) return 'confidence-medium';\n  return 'confidence-low';\n};\n\nexport const getConfidenceColor = (confidence) => {\n  if (confidence >= 90) return 'bg-green-100 text-green-800 border-green-300';\n  if (confidence >= 85) return 'bg-blue-100 text-blue-800 border-blue-300';\n  if (confidence >= 75) return 'bg-purple-100 text-purple-800 border-purple-300';\n  if (confidence >= 65) return 'bg-yellow-100 text-yellow-800 border-yellow-300';\n  return 'bg-gray-100 text-gray-800 border-gray-300';\n};\n\nexport const calculateAlgorithmScore = (predicted, actual) => {\n  if (!predicted || !actual) return 0;\n  \n  let score = 0;\n  const maxScore = 6; // 5 main numbers + 1 powerball\n  \n  // Score main numbers\n  if (predicted.numbers && actual.numbers) {\n    const matches = predicted.numbers.filter(num => actual.numbers.includes(num)).length;\n    score += matches;\n  }\n  \n  // Score powerball\n  if (predicted.powerball === actual.powerball) {\n    score += 1;\n  }\n  \n  return (score / maxScore) * 100; // Return as percentage\n};\n\nexport const normalizeConfidence = (confidence, min = 65, max = 95) => {\n  if (typeof confidence !== 'number') return min;\n  return Math.max(min, Math.min(max, Math.round(confidence)));\n};\n\n// ===========================================================================\n// LOCAL STORAGE HELPERS\n// ===========================================================================\n\nexport const saveToStorage = (key, data) => {\n  try {\n    const serializedData = JSON.stringify({\n      data,\n      timestamp: Date.now(),\n      version: APP_CONFIG.version\n    });\n    localStorage.setItem(`lcv2_${key}`, serializedData);\n    return true;\n  } catch (error) {\n    console.warn('Failed to save to localStorage:', error);\n    return false;\n  }\n};\n\nexport const loadFromStorage = (key, defaultValue = null) => {\n  try {\n    const item = localStorage.getItem(`lcv2_${key}`);\n    if (!item) return defaultValue;\n    \n    const parsed = JSON.parse(item);\n    \n    // Check if data is stale (older than cache timeout)\n    if (Date.now() - parsed.timestamp > APP_CONFIG.cacheTimeout) {\n      localStorage.removeItem(`lcv2_${key}`);\n      return defaultValue;\n    }\n    \n    return parsed.data;\n  } catch (error) {\n    console.warn('Failed to load from localStorage:', error);\n    return defaultValue;\n  }\n};\n\nexport const removeFromStorage = (key) => {\n  try {\n    localStorage.removeItem(`lcv2_${key}`);\n    return true;\n  } catch (error) {\n    console.warn('Failed to remove from localStorage:', error);\n    return false;\n  }\n};\n\nexport const clearAllStorage = () => {\n  try {\n    Object.keys(localStorage).forEach(key => {\n      if (key.startsWith('lcv2_')) {\n        localStorage.removeItem(key);\n      }\n    });\n    return true;\n  } catch (error) {\n    console.warn('Failed to clear localStorage:', error);\n    return false;\n  }\n};\n\n// ===========================================================================\n// ARRAY AND OBJECT UTILITIES\n// ===========================================================================\n\nexport const deepClone = (obj) => {\n  try {\n    return JSON.parse(JSON.stringify(obj));\n  } catch (error) {\n    console.warn('Deep clone failed, returning original:', error);\n    return obj;\n  }\n};\n\nexport const shuffleArray = (array) => {\n  const newArray = [...array];\n  for (let i = newArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n  }\n  return newArray;\n};\n\nexport const removeDuplicates = (array, keyFn = (item) => item) => {\n  const seen = new Set();\n  return array.filter(item => {\n    const key = keyFn(item);\n    if (seen.has(key)) {\n      return false;\n    }\n    seen.add(key);\n    return true;\n  });\n};\n\nexport const sortBy = (array, keyFn, direction = 'asc') => {\n  return [...array].sort((a, b) => {\n    const aVal = keyFn(a);\n    const bVal = keyFn(b);\n    \n    if (direction === 'desc') {\n      return bVal > aVal ? 1 : bVal < aVal ? -1 : 0;\n    } else {\n      return aVal > bVal ? 1 : aVal < bVal ? -1 : 0;\n    }\n  });\n};\n\nexport const groupBy = (array, keyFn) => {\n  return array.reduce((groups, item) => {\n    const key = keyFn(item);\n    if (!groups[key]) {\n      groups[key] = [];\n    }\n    groups[key].push(item);\n    return groups;\n  }, {});\n};\n\nexport const chunk = (array, size) => {\n  const chunks = [];\n  for (let i = 0; i < array.length; i += size) {\n    chunks.push(array.slice(i, i + size));\n  }\n  return chunks;\n};\n\n// ===========================================================================\n// PERFORMANCE AND OPTIMIZATION HELPERS\n// ===========================================================================\n\nexport const debounce = (func, wait, immediate = false) => {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      timeout = null;\n      if (!immediate) func(...args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func(...args);\n  };\n};\n\nexport const throttle = (func, limit) => {\n  let inThrottle;\n  return function executedFunction(...args) {\n    if (!inThrottle) {\n      func.apply(this, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n};\n\nexport const memoize = (func, keyGenerator = (...args) => JSON.stringify(args)) => {\n  const cache = new Map();\n  \n  return function memoizedFunction(...args) {\n    const key = keyGenerator(...args);\n    \n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    \n    const result = func.apply(this, args);\n    cache.set(key, result);\n    \n    // Prevent memory leaks by limiting cache size\n    if (cache.size > 100) {\n      const firstKey = cache.keys().next().value;\n      cache.delete(firstKey);\n    }\n    \n    return result;\n  };\n};\n\n// ===========================================================================\n// DATA ANALYSIS HELPERS\n// ===========================================================================\n\nexport const calculateHistoricalDepth = (drawings) => {\n  if (!drawings || drawings.length === 0) return 'No data';\n  \n  try {\n    const dates = drawings\n      .map(d => d.date)\n      .filter(date => date)\n      .map(date => new Date(date))\n      .sort((a, b) => a - b);\n    \n    if (dates.length === 0) return 'No dates';\n    \n    const earliestDate = dates[0];\n    const latestDate = dates[dates.length - 1];\n    const daysDiff = Math.floor((latestDate - earliestDate) / (1000 * 60 * 60 * 24));\n    \n    if (daysDiff > 365) {\n      return `${Math.floor(daysDiff / 365)} years`;\n    } else if (daysDiff > 30) {\n      return `${Math.floor(daysDiff / 30)} months`;\n    } else {\n      return `${daysDiff} days`;\n    }\n  } catch (error) {\n    return 'Invalid data';\n  }\n};\n\nexport const calculateStatistics = (numbers) => {\n  if (!Array.isArray(numbers) || numbers.length === 0) {\n    return { mean: 0, median: 0, mode: 0, stdDev: 0 };\n  }\n  \n  const sorted = [...numbers].sort((a, b) => a - b);\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const mean = sum / numbers.length;\n  \n  // Median\n  const median = sorted.length % 2 === 0 \n    ? (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2\n    : sorted[Math.floor(sorted.length / 2)];\n  \n  // Mode\n  const frequency = {};\n  numbers.forEach(num => {\n    frequency[num] = (frequency[num] || 0) + 1;\n  });\n  const mode = Object.entries(frequency)\n    .sort(([,a], [,b]) => b - a)[0]?.[0] || 0;\n  \n  // Standard deviation\n  const variance = numbers.reduce((acc, num) => acc + Math.pow(num - mean, 2), 0) / numbers.length;\n  const stdDev = Math.sqrt(variance);\n  \n  return { mean, median, mode: parseInt(mode), stdDev };\n};\n\nexport const findTrends = (data, windowSize = 5) => {\n  if (!Array.isArray(data) || data.length < windowSize * 2) {\n    return { trend: 'insufficient_data', confidence: 0 };\n  }\n  \n  const recentWindow = data.slice(0, windowSize);\n  const previousWindow = data.slice(windowSize, windowSize * 2);\n  \n  const recentAvg = recentWindow.reduce((a, b) => a + b, 0) / recentWindow.length;\n  const previousAvg = previousWindow.reduce((a, b) => a + b, 0) / previousWindow.length;\n  \n  const difference = recentAvg - previousAvg;\n  const percentChange = Math.abs(difference / previousAvg) * 100;\n  \n  let trend = 'stable';\n  if (difference > 0 && percentChange > 5) trend = 'increasing';\n  if (difference < 0 && percentChange > 5) trend = 'decreasing';\n  \n  return {\n    trend,\n    confidence: Math.min(100, percentChange * 2),\n    recentAvg,\n    previousAvg,\n    change: difference\n  };\n};\n\n// ===========================================================================\n// ERROR HANDLING UTILITIES\n// ===========================================================================\n\nexport const handleApiError = (error, fallbackMessage = 'An error occurred') => {\n  if (error?.response) {\n    // HTTP error response\n    const status = error.response.status;\n    const data = error.response.data;\n    \n    if (status === 429) return 'Rate limit exceeded. Please wait before retrying.';\n    if (status === 401) return 'Authentication failed. Please check your API key.';\n    if (status === 403) return 'Access forbidden. Please check your permissions.';\n    if (status === 404) return 'Requested resource not found.';\n    if (status >= 500) return 'Server error. Please try again later.';\n    \n    return data?.error || data?.message || `HTTP ${status} error`;\n  } else if (error?.request) {\n    // Network error\n    return 'Network connection error. Please check your internet connection.';\n  } else if (error?.message) {\n    // JavaScript error\n    return error.message;\n  } else {\n    // Unknown error\n    return fallbackMessage;\n  }\n};\n\nexport const createErrorReport = (error, context = {}) => {\n  return {\n    message: error.message || 'Unknown error',\n    stack: error.stack,\n    timestamp: new Date().toISOString(),\n    userAgent: navigator.userAgent,\n    url: window.location.href,\n    context,\n    errorType: error.constructor.name\n  };\n};\n\nexport const logError = (error, context = {}) => {\n  const report = createErrorReport(error, context);\n  \n  // Log to console in development\n  if (APP_CONFIG.environment === 'development') {\n    console.error('Error Report:', report);\n  }\n  \n  // In production, you might send to an error tracking service\n  // Example: sendToErrorTracker(report);\n  \n  return report;\n};\n\n// ===========================================================================\n// BROWSER COMPATIBILITY HELPERS\n// ===========================================================================\n\nexport const isModernBrowser = () => {\n  try {\n    return !!(\n      window.fetch &&\n      window.Promise &&\n      window.Map &&\n      window.Set &&\n      Array.prototype.includes &&\n      Object.assign\n    );\n  } catch (error) {\n    return false;\n  }\n};\n\nexport const supportsLocalStorage = () => {\n  try {\n    const test = '__localStorage_test__';\n    localStorage.setItem(test, 'test');\n    localStorage.removeItem(test);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nexport const supportsClipboard = () => {\n  return !!(navigator.clipboard && navigator.clipboard.writeText);\n};\n\nexport const copyToClipboard = async (text) => {\n  try {\n    if (supportsClipboard()) {\n      await navigator.clipboard.writeText(text);\n      return true;\n    } else {\n      // Fallback for older browsers\n      const textArea = document.createElement('textarea');\n      textArea.value = text;\n      textArea.style.position = 'fixed';\n      textArea.style.opacity = '0';\n      document.body.appendChild(textArea);\n      textArea.focus();\n      textArea.select();\n      const success = document.execCommand('copy');\n      document.body.removeChild(textArea);\n      return success;\n    }\n  } catch (error) {\n    console.warn('Failed to copy to clipboard:', error);\n    return false;\n  }\n};\n\n// ===========================================================================\n// URL AND QUERY PARAMETER HELPERS\n// ===========================================================================\n\nexport const getQueryParameters = () => {\n  const params = new URLSearchParams(window.location.search);\n  const result = {};\n  \n  for (const [key, value] of params) {\n    result[key] = value;\n  }\n  \n  return result;\n};\n\nexport const setQueryParameter = (key, value) => {\n  const url = new URL(window.location);\n  url.searchParams.set(key, value);\n  window.history.replaceState({}, '', url);\n};\n\nexport const removeQueryParameter = (key) => {\n  const url = new URL(window.location);\n  url.searchParams.delete(key);\n  window.history.replaceState({}, '', url);\n};\n\n// ===========================================================================\n// EXPORT ALL FUNCTIONS\n// ===========================================================================\n\nexport default {\n  // Validation\n  isValidMainNumber,\n  isValidPowerball,\n  isValidPowerballNumbers,\n  validateNumberSum,\n  validateNumberDistribution,\n  validateHistoricalData,\n  validateJackpotData,\n  validateApiResponse,\n  validateApiKey,\n  \n  // Formatting\n  formatJackpot,\n  formatCurrency,\n  formatPercentage,\n  formatNumbers,\n  formatDate,\n  formatTime,\n  \n  // Date/Time\n  calculateNextDrawing,\n  getTimeSince,\n  isWithinTimeRange,\n  \n  // Random Generation\n  generateQuickPick,\n  generateRandomInRange,\n  generateWeightedRandom,\n  \n  // Confidence/Scoring\n  getConfidenceClass,\n  getConfidenceColor,\n  calculateAlgorithmScore,\n  normalizeConfidence,\n  \n  // Storage\n  saveToStorage,\n  loadFromStorage,\n  removeFromStorage,\n  clearAllStorage,\n  \n  // Array/Object Utils\n  deepClone,\n  shuffleArray,\n  removeDuplicates,\n  sortBy,\n  groupBy,\n  chunk,\n  \n  // Performance\n  debounce,\n  throttle,\n  memoize,\n  \n  // Data Analysis\n  calculateHistoricalDepth,\n  calculateStatistics,\n  findTrends,\n  \n  // Error Handling\n  handleApiError,\n  createErrorReport,\n  logError,\n  \n  // Browser Compatibility\n  isModernBrowser,\n  supportsLocalStorage,\n  supportsClipboard,\n  copyToClipboard,\n  \n  // URL Utils\n  getQueryParameters,\n  setQueryParameter,\n  removeQueryParameter\n};\n\n// ===========================================================================\n// INITIALIZATION\n// ===========================================================================\n\n// Run compatibility checks on import\nif (typeof window !== 'undefined') {\n  const compatibility = {\n    modern: isModernBrowser(),\n    localStorage: supportsLocalStorage(),\n    clipboard: supportsClipboard()\n  };\n  \n  console.log('🔧 Browser compatibility:', compatibility);\n  \n  if (!compatibility.modern) {\n    console.warn('⚠️ Some features may not work in this browser. Please update to a modern browser.');\n  }\n}","// LCv2 Advanced Lottery Predictor Service - 6 Algorithm Ensemble System\r\nimport { ALGORITHM_CONFIG, LOTTERY_RULES } from '../utils/constants.js';\r\nimport { isValidPowerballNumbers, shuffleArray } from '../utils/helpers.js';\r\n\r\nexport class LotteryPredictor {\r\n  constructor() {\r\n    this.algorithmPerformance = this.initializeAlgorithmPerformance();\r\n    this.ewmaAlpha = ALGORITHM_CONFIG.ewmaAlpha;\r\n    this.neuralWeights = this.initializeNeuralWeights();\r\n    this.predictionHistory = [];\r\n    this.performanceWindow = ALGORITHM_CONFIG.performanceWindow;\r\n    this.accuracyHistory = [];\r\n    this.isLearning = true;\r\n    this.initialized = false;\r\n  }\r\n\r\n  // ===========================================================================\r\n  // INITIALIZATION\r\n  // ===========================================================================\r\n\r\n  initialize() {\r\n    if (this.initialized) return;\r\n    \r\n    console.log('?? Initializing LotteryPredictor with 6 algorithms...');\r\n    \r\n    // Initialize algorithm performance tracking\r\n    this.algorithmPerformance = this.initializeAlgorithmPerformance();\r\n    \r\n    // Initialize neural network weights\r\n    this.neuralWeights = this.initializeNeuralWeights();\r\n    \r\n    // Set up performance monitoring\r\n    this.setupPerformanceMonitoring();\r\n    \r\n    this.initialized = true;\r\n    console.log('? LotteryPredictor initialized successfully');\r\n    console.log(`?? Algorithms: ${Object.keys(this.algorithmPerformance).length}`);\r\n    console.log(`?? Performance window: ${this.performanceWindow} predictions`);\r\n  }\r\n\r\n  initializeAlgorithmPerformance() {\r\n    const performance = {};\r\n    ALGORITHM_CONFIG.algorithms.forEach(alg => {\r\n      performance[alg.id] = {\r\n        name: alg.name,\r\n        weight: alg.weight,\r\n        successRate: 0.15, // Base success rate\r\n        recentHits: [],\r\n        totalPredictions: 0,\r\n        correctPredictions: 0,\r\n        averageConfidence: 75,\r\n        lastUsed: null,\r\n        description: alg.description\r\n      };\r\n    });\r\n    return performance;\r\n  }\r\n\r\n  initializeNeuralWeights() {\r\n    const inputSize = 10;  // Feature vector size\r\n    const hiddenSize = 20; // Hidden layer size\r\n    const outputSize = 69; // Output layer size (for numbers 1-69)\r\n    \r\n    return {\r\n      w1: Array(inputSize).fill().map(() => \r\n        Array(hiddenSize).fill().map(() => (Math.random() - 0.5) * 0.1)\r\n      ),\r\n      w2: Array(hiddenSize).fill().map(() => \r\n        Array(outputSize).fill().map(() => (Math.random() - 0.5) * 0.1)\r\n      ),\r\n      b1: Array(hiddenSize).fill(0),\r\n      b2: Array(outputSize).fill(0)\r\n    };\r\n  }\r\n\r\n  setupPerformanceMonitoring() {\r\n    // Track algorithm performance over time\r\n    setInterval(() => {\r\n      this.updateAlgorithmMetrics();\r\n    }, 60000); // Update every minute\r\n  }\r\n\r\n  // ===========================================================================\r\n  // MAIN PREDICTION GENERATOR\r\n  // ===========================================================================\r\n\r\n  generateEnsemblePrediction(historicalData, requestedSets = 5) {\r\n    if (!this.initialized) {\r\n      this.initialize();\r\n    }\r\n\r\n    if (!this.validateHistoricalData(historicalData)) {\r\n      console.warn('?? Historical data validation failed, using fallback');\r\n      return this.generateFallbackPredictions(requestedSets);\r\n    }\r\n\r\n    console.log(`?? Generating ${requestedSets} ensemble predictions from ${historicalData.length} drawings`);\r\n\r\n    try {\r\n      // Run all algorithms\r\n      const algorithmResults = this.runAllAlgorithms(historicalData);\r\n      \r\n      // Create ensemble predictions\r\n      const ensemblePredictions = this.createEnsemblePredictions(algorithmResults, requestedSets);\r\n      \r\n      // Validate and enhance predictions\r\n      const validatedPredictions = this.validateAndEnhancePredictions(ensemblePredictions, historicalData);\r\n      \r\n      // Update prediction history\r\n      this.updatePredictionHistory(validatedPredictions);\r\n      \r\n      console.log('? Ensemble predictions generated successfully');\r\n      return validatedPredictions;\r\n\r\n\r\n    } catch (error) {\r\n      console.error('? Ensemble prediction failed:', error);\r\n      return this.generateFallbackPredictions(requestedSets);\r\n    }\r\n  }\r\n\r\n  runAllAlgorithms(historicalData) {\r\n    const results = {};\r\n    \r\n    try {\r\n      // Algorithm 1: EWMA Frequency Analysis\r\n      results.ewma = this.generateEWMAFrequencyPrediction(historicalData);\r\n      this.algorithmPerformance.ewma.lastUsed = new Date();\r\n      \r\n      // Algorithm 2: Neural Network Pattern Recognition\r\n      results.neural = this.generateNeuralNetworkPrediction(historicalData);\r\n      this.algorithmPerformance.neural.lastUsed = new Date();\r\n      \r\n      // Algorithm 3: Pair Relationship Analysis\r\n      results.pairs = this.generatePairAnalysisPrediction(historicalData);\r\n      this.algorithmPerformance.pairs.lastUsed = new Date();\r\n      \r\n      // Algorithm 4: Gap Analysis Optimization\r\n      results.gaps = this.generateGapAnalysisPrediction(historicalData);\r\n      this.algorithmPerformance.gaps.lastUsed = new Date();\r\n      \r\n      // Algorithm 5: Markov Chain Transition\r\n      results.markov = this.generateMarkovChainPrediction(historicalData);\r\n      this.algorithmPerformance.markov.lastUsed = new Date();\r\n      \r\n      // Algorithm 6: Sum Range Optimization\r\n      results.sum = this.generateSumRangePrediction(historicalData);\r\n      this.algorithmPerformance.sum.lastUsed = new Date();\r\n\r\n      console.log(`?? ${Object.keys(results).length} algorithms executed successfully`);\r\n      return results;\r\n\r\n    } catch (error) {\r\n      console.error('?? Some algorithms failed:', error);\r\n      \r\n      // Return partial results or fallback\r\n      const fallbackResults = {};\r\n      for (let i = 0; i < 6; i++) {\r\n        fallbackResults[`fallback_${i}`] = this.generateRandomPrediction(i);\r\n      }\r\n      return fallbackResults;\r\n    }\r\n  }\r\n\r\n  // ===========================================================================\r\n  // ALGORITHM 1: EWMA FREQUENCY ANALYSIS\r\n  // ===========================================================================\r\n\r\n  generateEWMAFrequencyPrediction(historicalData) {\r\n    try {\r\n      const frequencies = this.calculateEWMAFrequencies(historicalData);\r\n      const powerballFreqs = this.calculateEWMAPowerballFrequencies(historicalData);\r\n      \r\n      // Select numbers based on EWMA weights\r\n      const numbers = [];\r\n      const weightedNumbers = Object.entries(frequencies.numbers)\r\n        .sort(([,a], [,b]) => b - a)\r\n        .slice(0, 15); // Top 15 candidates\r\n      \r\n      // Add some randomization to avoid always picking the same numbers\r\n      const selectedCandidates = shuffleArray(weightedNumbers).slice(0, 8);\r\n      \r\n      while (numbers.length < 5) {\r\n        const [num, weight] = selectedCandidates[numbers.length % selectedCandidates.length];\r\n        const candidate = parseInt(num);\r\n        if (!numbers.includes(candidate) && candidate >= 1 && candidate <= 69) {\r\n          numbers.push(candidate);\r\n        }\r\n      }\r\n      \r\n      // Select powerball\r\n      const powerballCandidates = Object.entries(frequencies.powerball)\r\n        .sort(([,a], [,b]) => b - a)\r\n        .slice(0, 8);\r\n      \r\n      const powerball = parseInt(powerballCandidates[Math.floor(Math.random() * powerballCandidates.length)][0]);\r\n      \r\n      return {\r\n        numbers: numbers.sort((a, b) => a - b),\r\n        powerball: powerball,\r\n        strategy: 'EWMA Frequency Analysis',\r\n        confidence: this.calculatePredictionConfidence('ewma', numbers, powerball),\r\n        analysis: 'Exponentially weighted moving average with recent trend emphasis',\r\n        algorithmId: 'ewma'\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('EWMA algorithm failed:', error);\r\n      return this.generateRandomPrediction(0);\r\n    }\r\n  }\r\n\r\n  calculateEWMAFrequencies(historicalData) {\r\n    const numberEWMA = {};\r\n    const powerballEWMA = {};\r\n    \r\n    // Initialize\r\n    for (let i = 1; i <= 69; i++) numberEWMA[i] = 0;\r\n    for (let i = 1; i <= 26; i++) powerballEWMA[i] = 0;\r\n    \r\n    if (!historicalData || historicalData.length === 0) {\r\n      return { numbers: numberEWMA, powerball: powerballEWMA };\r\n    }\r\n    \r\n    // Calculate EWMA with more recent drawings having higher weight\r\n    historicalData.forEach((drawing, index) => {\r\n      const weight = Math.pow(1 - this.ewmaAlpha, historicalData.length - index - 1);\r\n      \r\n      if (drawing.numbers && Array.isArray(drawing.numbers)) {\r\n        drawing.numbers.forEach(num => {\r\n          if (num >= 1 && num <= 69) {\r\n            numberEWMA[num] = this.ewmaAlpha * weight + (1 - this.ewmaAlpha) * numberEWMA[num];\r\n          }\r\n        });\r\n      }\r\n      \r\n      if (drawing.powerball >= 1 && drawing.powerball <= 26) {\r\n        powerballEWMA[drawing.powerball] = this.ewmaAlpha * weight + \r\n          (1 - this.ewmaAlpha) * powerballEWMA[drawing.powerball];\r\n      }\r\n    });\r\n    \r\n    return { numbers: numberEWMA, powerball: powerballEWMA };\r\n  }\r\n\r\n  calculateEWMAPowerballFrequencies(historicalData) {\r\n    const frequencies = {};\r\n    for (let i = 1; i <= 26; i++) frequencies[i] = 0;\r\n    \r\n    historicalData.forEach((drawing, index) => {\r\n      if (drawing.powerball >= 1 && drawing.powerball <= 26) {\r\n        const weight = Math.pow(1 - this.ewmaAlpha, historicalData.length - index - 1);\r\n        frequencies[drawing.powerball] += weight;\r\n      }\r\n    });\r\n    \r\n    return frequencies;\r\n  }\r\n\r\n  // ===========================================================================\r\n  // ALGORITHM 2: NEURAL NETWORK PATTERN RECOGNITION\r\n  // ===========================================================================\r\n\r\n  generateNeuralNetworkPrediction(historicalData) {\r\n    try {\r\n      const features = this.extractNeuralFeatures(historicalData);\r\n      const predictions = this.forwardPassNeural(features);\r\n      \r\n      // Convert neural network output to number selection\r\n      const numbers = this.neuralOutputToNumbers(predictions);\r\n      const powerball = this.neuralOutputToPowerball(predictions);\r\n      \r\n      return {\r\n        numbers: numbers.sort((a, b) => a - b),\r\n        powerball: powerball,\r\n        strategy: 'Neural Network Pattern Recognition',\r\n        confidence: this.calculatePredictionConfidence('neural', numbers, powerball),\r\n        analysis: 'Multi-layer neural network analyzing positional and temporal patterns',\r\n        algorithmId: 'neural'\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('Neural network algorithm failed:', error);\r\n      return this.generateRandomPrediction(1);\r\n    }\r\n  }\r\n\r\n  extractNeuralFeatures(historicalData) {\r\n    const features = new Array(10).fill(0);\r\n    \r\n    if (historicalData.length === 0) return features;\r\n    \r\n    const recent = historicalData.slice(0, Math.min(10, historicalData.length));\r\n    \r\n    // Feature 1-5: Average positions of recent numbers\r\n    for (let i = 0; i < 5; i++) {\r\n      let sum = 0;\r\n      let count = 0;\r\n      recent.forEach(drawing => {\r\n        if (drawing.numbers && drawing.numbers[i]) {\r\n          sum += drawing.numbers[i];\r\n          count++;\r\n        }\r\n      });\r\n      features[i] = count > 0 ? sum / count / 69 : 0.5; // Normalize\r\n    }\r\n    \r\n    // Feature 6: Average sum of recent drawings\r\n    let sumTotal = 0;\r\n    let sumCount = 0;\r\n    recent.forEach(drawing => {\r\n      if (drawing.numbers) {\r\n        sumTotal += drawing.numbers.reduce((a, b) => a + b, 0);\r\n        sumCount++;\r\n      }\r\n    });\r\n    features[5] = sumCount > 0 ? (sumTotal / sumCount) / 345 : 0.5; // Normalize by max possible sum\r\n    \r\n    // Feature 7: Trend in sums (increasing/decreasing)\r\n    if (recent.length >= 3) {\r\n      const recentSums = recent.slice(0, 3).map(d => \r\n        d.numbers ? d.numbers.reduce((a, b) => a + b, 0) : 0\r\n      );\r\n      features[6] = (recentSums[0] - recentSums[2]) / 345; // Normalize trend\r\n    }\r\n    \r\n    // Feature 8: Even/odd ratio in recent drawings\r\n    let evenCount = 0, totalNumbers = 0;\r\n    recent.forEach(drawing => {\r\n      if (drawing.numbers) {\r\n        drawing.numbers.forEach(num => {\r\n          if (num % 2 === 0) evenCount++;\r\n          totalNumbers++;\r\n        });\r\n      }\r\n    });\r\n    features[7] = totalNumbers > 0 ? evenCount / totalNumbers : 0.5;\r\n    \r\n    // Feature 9: High/low ratio (>35 vs <=35)\r\n    let highCount = 0;\r\n    totalNumbers = 0;\r\n    recent.forEach(drawing => {\r\n      if (drawing.numbers) {\r\n        drawing.numbers.forEach(num => {\r\n          if (num > 35) highCount++;\r\n          totalNumbers++;\r\n        });\r\n      }\r\n    });\r\n    features[8] = totalNumbers > 0 ? highCount / totalNumbers : 0.5;\r\n    \r\n    // Feature 10: Days since last occurrence of most frequent number\r\n    const frequencies = {};\r\n    historicalData.forEach(drawing => {\r\n      if (drawing.numbers) {\r\n        drawing.numbers.forEach(num => {\r\n          frequencies[num] = (frequencies[num] || 0) + 1;\r\n        });\r\n      }\r\n    });\r\n    const mostFrequent = Object.entries(frequencies)\r\n      .sort(([,a], [,b]) => b - a)[0];\r\n    features[9] = mostFrequent ? Math.min(1, (frequencies[mostFrequent[0]] || 0) / 100) : 0;\r\n    \r\n    return features;\r\n  }\r\n\r\n  forwardPassNeural(features) {\r\n    // Simple forward pass through neural network\r\n    const { w1, w2, b1, b2 } = this.neuralWeights;\r\n    \r\n    // Hidden layer\r\n    const hidden = new Array(20).fill(0);\r\n    for (let i = 0; i < 20; i++) {\r\n      let sum = b1[i];\r\n      for (let j = 0; j < 10; j++) {\r\n        sum += features[j] * w1[j][i];\r\n      }\r\n      hidden[i] = Math.tanh(sum); // Activation function\r\n    }\r\n    \r\n    // Output layer\r\n    const output = new Array(69).fill(0);\r\n    for (let i = 0; i < 69; i++) {\r\n      let sum = b2[i];\r\n      for (let j = 0; j < 20; j++) {\r\n        sum += hidden[j] * w2[j][i];\r\n      }\r\n      output[i] = 1 / (1 + Math.exp(-sum)); // Sigmoid activation\r\n    }\r\n    \r\n    return output;\r\n  }\r\n\r\n  neuralOutputToNumbers(predictions) {\r\n    // Convert neural network output to 5 numbers\r\n    const candidates = predictions\r\n      .map((prob, index) => ({ number: index + 1, probability: prob }))\r\n      .sort((a, b) => b.probability - a.probability);\r\n    \r\n    const selected = [];\r\n    let candidateIndex = 0;\r\n    \r\n    while (selected.length < 5 && candidateIndex < candidates.length) {\r\n      const candidate = candidates[candidateIndex];\r\n      \r\n      // Add some randomness to avoid always picking the highest probabilities\r\n      if (Math.random() < candidate.probability + 0.3) {\r\n        selected.push(candidate.number);\r\n      }\r\n      candidateIndex++;\r\n    }\r\n    \r\n    // Fill remaining slots if needed\r\n    while (selected.length < 5) {\r\n      const randomCandidate = Math.floor(Math.random() * 69) + 1;\r\n      if (!selected.includes(randomCandidate)) {\r\n        selected.push(randomCandidate);\r\n      }\r\n    }\r\n    \r\n    return selected;\r\n  }\r\n\r\n  neuralOutputToPowerball(predictions) {\r\n    // Use first few neural outputs to influence powerball selection\r\n    const sum = predictions.slice(0, 5).reduce((a, b) => a + b, 0);\r\n    return Math.floor(sum * 26) + 1;\r\n  }\r\n\r\n  // ===========================================================================\r\n  // ALGORITHM 3: PAIR RELATIONSHIP ANALYSIS\r\n  // ===========================================================================\r\n\r\n  generatePairAnalysisPrediction(historicalData) {\r\n    try {\r\n      const pairFrequencies = this.calculatePairFrequencies(historicalData);\r\n      const numbers = this.selectNumbersFromPairs(pairFrequencies);\r\n      const powerball = this.selectPowerballFromPairs(historicalData);\r\n      \r\n      return {\r\n        numbers: numbers.sort((a, b) => a - b),\r\n        powerball: powerball,\r\n        strategy: 'Pair Relationship Analysis',\r\n        confidence: this.calculatePredictionConfidence('pairs', numbers, powerball),\r\n        analysis: 'Co-occurrence pattern analysis identifying number pair relationships',\r\n        algorithmId: 'pairs'\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('Pair analysis algorithm failed:', error);\r\n      return this.generateRandomPrediction(2);\r\n    }\r\n  }\r\n\r\n  calculatePairFrequencies(historicalData) {\r\n    const pairs = {};\r\n    \r\n    historicalData.forEach(drawing => {\r\n      if (!drawing.numbers || drawing.numbers.length !== 5) return;\r\n      \r\n      // Calculate all pairs in this drawing\r\n      for (let i = 0; i < 5; i++) {\r\n        for (let j = i + 1; j < 5; j++) {\r\n          const num1 = drawing.numbers[i];\r\n          const num2 = drawing.numbers[j];\r\n          const pairKey = `${Math.min(num1, num2)}-${Math.max(num1, num2)}`;\r\n          \r\n          pairs[pairKey] = (pairs[pairKey] || 0) + 1;\r\n        }\r\n      }\r\n    });\r\n    \r\n    return pairs;\r\n  }\r\n\r\n  selectNumbersFromPairs(pairFrequencies) {\r\n    const numbers = [];\r\n    const usedNumbers = new Set();\r\n    \r\n    // Sort pairs by frequency\r\n    const sortedPairs = Object.entries(pairFrequencies)\r\n      .sort(([,a], [,b]) => b - a);\r\n    \r\n    // Select numbers from highest frequency pairs\r\n    for (const [pairKey, frequency] of sortedPairs) {\r\n      if (numbers.length >= 5) break;\r\n      \r\n      const [num1, num2] = pairKey.split('-').map(n => parseInt(n));\r\n      \r\n      if (!usedNumbers.has(num1) && numbers.length < 5) {\r\n        numbers.push(num1);\r\n        usedNumbers.add(num1);\r\n      }\r\n      \r\n      if (!usedNumbers.has(num2) && numbers.length < 5) {\r\n        numbers.push(num2);\r\n        usedNumbers.add(num2);\r\n      }\r\n    }\r\n    \r\n    // Fill remaining slots with random numbers\r\n    while (numbers.length < 5) {\r\n      const candidate = Math.floor(Math.random() * 69) + 1;\r\n      if (!usedNumbers.has(candidate)) {\r\n        numbers.push(candidate);\r\n        usedNumbers.add(candidate);\r\n      }\r\n    }\r\n    \r\n    return numbers;\r\n  }\r\n\r\n  selectPowerballFromPairs(historicalData) {\r\n    const powerballFreq = {};\r\n    \r\n    historicalData.forEach(drawing => {\r\n      if (drawing.powerball >= 1 && drawing.powerball <= 26) {\r\n        powerballFreq[drawing.powerball] = (powerballFreq[drawing.powerball] || 0) + 1;\r\n      }\r\n    });\r\n    \r\n    const sortedPowerballs = Object.entries(powerballFreq)\r\n      .sort(([,a], [,b]) => b - a);\r\n    \r\n    // Select from top 8 most frequent powerballs with some randomness\r\n    const topCandidates = sortedPowerballs.slice(0, 8);\r\n    const selectedIndex = Math.floor(Math.random() * topCandidates.length);\r\n    \r\n    return parseInt(topCandidates[selectedIndex]?.[0] || '1');\r\n  }\r\n\r\n  // ===========================================================================\r\n  // ALGORITHM 4: GAP ANALYSIS OPTIMIZATION\r\n  // ===========================================================================\r\n\r\n  generateGapAnalysisPrediction(historicalData) {\r\n    try {\r\n      const gaps = this.calculateNumberGaps(historicalData);\r\n      const numbers = this.selectOverdueNumbers(gaps);\r\n      const powerball = this.selectOverduePowerball(historicalData);\r\n      \r\n      return {\r\n        numbers: numbers.sort((a, b) => a - b),\r\n        powerball: powerball,\r\n        strategy: 'Gap Analysis Optimization',\r\n        confidence: this.calculatePredictionConfidence('gaps', numbers, powerball),\r\n        analysis: 'Overdue number identification using gap pattern analysis',\r\n        algorithmId: 'gaps'\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('Gap analysis algorithm failed:', error);\r\n      return this.generateRandomPrediction(3);\r\n    }\r\n  }\r\n\r\n  calculateNumberGaps(historicalData) {\r\n    const gaps = {};\r\n    const currentGaps = {};\r\n    \r\n    // Initialize\r\n    for (let i = 1; i <= 69; i++) {\r\n      gaps[i] = [];\r\n      currentGaps[i] = 0;\r\n    }\r\n    \r\n    // Calculate gaps for each number\r\n    historicalData.forEach((drawing, index) => {\r\n      // Increment gap for all numbers\r\n      for (let i = 1; i <= 69; i++) {\r\n        currentGaps[i]++;\r\n      }\r\n      \r\n      // Reset gap for drawn numbers\r\n      if (drawing.numbers) {\r\n        drawing.numbers.forEach(num => {\r\n          if (num >= 1 && num <= 69) {\r\n            gaps[num].push(currentGaps[num]);\r\n            currentGaps[num] = 0;\r\n          }\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Calculate statistics for each number\r\n    const gapStats = {};\r\n    for (let i = 1; i <= 69; i++) {\r\n      const numberGaps = gaps[i];\r\n      if (numberGaps.length > 0) {\r\n        const avgGap = numberGaps.reduce((a, b) => a + b, 0) / numberGaps.length;\r\n        gapStats[i] = {\r\n          currentGap: currentGaps[i],\r\n          averageGap: avgGap,\r\n          maxGap: Math.max(...numberGaps),\r\n          overdueScore: currentGaps[i] / avgGap // How overdue compared to average\r\n        };\r\n      } else {\r\n        gapStats[i] = {\r\n          currentGap: currentGaps[i],\r\n          averageGap: historicalData.length / 5, // Rough estimate\r\n          maxGap: currentGaps[i],\r\n          overdueScore: 1\r\n        };\r\n      }\r\n    }\r\n    \r\n    return gapStats;\r\n  }\r\n\r\n  selectOverdueNumbers(gapStats) {\r\n    // Sort numbers by overdue score\r\n    const overdueNumbers = Object.entries(gapStats)\r\n      .sort(([,a], [,b]) => b.overdueScore - a.overdueScore)\r\n      .slice(0, 15) // Top 15 overdue\r\n      .map(([num, stats]) => ({ \r\n        number: parseInt(num), \r\n        score: stats.overdueScore,\r\n        gap: stats.currentGap\r\n      }));\r\n    \r\n    const selected = [];\r\n    \r\n    // Select mix of most overdue and moderate overdue\r\n    const mostOverdue = overdueNumbers.slice(0, 3);\r\n    const moderateOverdue = overdueNumbers.slice(3, 10);\r\n    \r\n    // Add 2-3 from most overdue\r\n    shuffleArray(mostOverdue).slice(0, 3).forEach(item => {\r\n      if (selected.length < 5) {\r\n        selected.push(item.number);\r\n      }\r\n    });\r\n    \r\n    // Add remaining from moderate overdue\r\n    shuffleArray(moderateOverdue).forEach(item => {\r\n      if (selected.length < 5 && !selected.includes(item.number)) {\r\n        selected.push(item.number);\r\n      }\r\n    });\r\n    \r\n    // Fill any remaining slots\r\n    while (selected.length < 5) {\r\n      const candidate = Math.floor(Math.random() * 69) + 1;\r\n      if (!selected.includes(candidate)) {\r\n        selected.push(candidate);\r\n      }\r\n    }\r\n    \r\n    return selected;\r\n  }\r\n\r\n  selectOverduePowerball(historicalData) {\r\n    const powerballGaps = {};\r\n    let currentGaps = {};\r\n    \r\n    // Initialize\r\n    for (let i = 1; i <= 26; i++) {\r\n      powerballGaps[i] = [];\r\n      currentGaps[i] = 0;\r\n    }\r\n    \r\n    historicalData.forEach(drawing => {\r\n      // Increment gaps\r\n      for (let i = 1; i <= 26; i++) {\r\n        currentGaps[i]++;\r\n      }\r\n      \r\n      // Reset for drawn powerball\r\n      if (drawing.powerball >= 1 && drawing.powerball <= 26) {\r\n        powerballGaps[drawing.powerball].push(currentGaps[drawing.powerball]);\r\n        currentGaps[drawing.powerball] = 0;\r\n      }\r\n    });\r\n    \r\n    // Find most overdue powerball\r\n    let maxOverdue = 0;\r\n    let selectedPowerball = 1;\r\n    \r\n    for (let i = 1; i <= 26; i++) {\r\n      if (currentGaps[i] > maxOverdue) {\r\n        maxOverdue = currentGaps[i];\r\n        selectedPowerball = i;\r\n      }\r\n    }\r\n    \r\n    return selectedPowerball;\r\n  }\r\n\r\n  // ===========================================================================\r\n  // ALGORITHM 5: MARKOV CHAIN TRANSITION\r\n  // ===========================================================================\r\n\r\n  generateMarkovChainPrediction(historicalData) {\r\n    try {\r\n      const transitionMatrix = this.buildTransitionMatrix(historicalData);\r\n      const numbers = this.generateMarkovSequence(transitionMatrix, historicalData);\r\n      const powerball = this.generateMarkovPowerball(historicalData);\r\n      \r\n      return {\r\n        numbers: numbers.sort((a, b) => a - b),\r\n        powerball: powerball,\r\n        strategy: 'Markov Chain Transition',\r\n        confidence: this.calculatePredictionConfidence('markov', numbers, powerball),\r\n        analysis: 'State transition analysis predicting next numbers based on sequence patterns',\r\n        algorithmId: 'markov'\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('Markov chain algorithm failed:', error);\r\n      return this.generateRandomPrediction(4);\r\n    }\r\n  }\r\n\r\n  buildTransitionMatrix(historicalData) {\r\n    const transitions = {};\r\n    \r\n    // Build transition counts\r\n    for (let i = 0; i < historicalData.length - 1; i++) {\r\n      const current = historicalData[i];\r\n      const next = historicalData[i + 1];\r\n      \r\n      if (!current.numbers || !next.numbers) continue;\r\n      \r\n      current.numbers.forEach(currentNum => {\r\n        if (!transitions[currentNum]) {\r\n          transitions[currentNum] = {};\r\n        }\r\n        \r\n        next.numbers.forEach(nextNum => {\r\n          transitions[currentNum][nextNum] = (transitions[currentNum][nextNum] || 0) + 1;\r\n        });\r\n      });\r\n    }\r\n    \r\n    // Convert to probabilities\r\n    Object.keys(transitions).forEach(currentNum => {\r\n      const total = Object.values(transitions[currentNum]).reduce((a, b) => a + b, 0);\r\n      if (total > 0) {\r\n        Object.keys(transitions[currentNum]).forEach(nextNum => {\r\n          transitions[currentNum][nextNum] /= total;\r\n        });\r\n      }\r\n    });\r\n    \r\n    return transitions;\r\n  }\r\n\r\n  generateMarkovSequence(transitionMatrix, historicalData) {\r\n    if (historicalData.length === 0) {\r\n      return this.generateRandomNumbers(5);\r\n    }\r\n    \r\n    const lastDrawing = historicalData[0];\r\n    if (!lastDrawing.numbers) {\r\n      return this.generateRandomNumbers(5);\r\n    }\r\n    \r\n    const numbers = [];\r\n    const usedNumbers = new Set();\r\n    \r\n    // Start with numbers from last drawing\r\n    const startingNumbers = [...lastDrawing.numbers];\r\n    \r\n    startingNumbers.forEach(startNum => {\r\n      if (numbers.length >= 5) return;\r\n      \r\n      const transitions = transitionMatrix[startNum] || {};\r\n      const candidates = Object.entries(transitions)\r\n        .sort(([,a], [,b]) => b - a)\r\n        .slice(0, 5);\r\n      \r\n      if (candidates.length > 0) {\r\n        // Select based on transition probabilities with some randomness\r\n        const selectedCandidate = candidates[Math.floor(Math.random() * Math.min(3, candidates.length))];\r\n        const candidateNum = parseInt(selectedCandidate[0]);\r\n        \r\n        if (!usedNumbers.has(candidateNum) && numbers.length < 5) {\r\n          numbers.push(candidateNum);\r\n          usedNumbers.add(candidateNum);\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Fill remaining slots\r\n    while (numbers.length < 5) {\r\n      const candidate = Math.floor(Math.random() * 69) + 1;\r\n      if (!usedNumbers.has(candidate)) {\r\n        numbers.push(candidate);\r\n        usedNumbers.add(candidate);\r\n      }\r\n    }\r\n    \r\n    return numbers;\r\n  }\r\n\r\n  generateMarkovPowerball(historicalData) {\r\n    if (historicalData.length < 2) {\r\n      return Math.floor(Math.random() * 26) + 1;\r\n    }\r\n    \r\n    // Simple Markov for powerball based on last few drawings\r\n    const recentPowerballs = historicalData\r\n      .slice(0, 5)\r\n      .map(d => d.powerball)\r\n      .filter(p => p >= 1 && p <= 26);\r\n    \r\n    if (recentPowerballs.length === 0) {\r\n      return Math.floor(Math.random() * 26) + 1;\r\n    }\r\n    \r\n    // Calculate average and add some variance\r\n    const avg = recentPowerballs.reduce((a, b) => a + b, 0) / recentPowerballs.length;\r\n    const variance = Math.floor(Math.random() * 6) - 3; // -3 to +3\r\n    const predicted = Math.max(1, Math.min(26, Math.round(avg + variance)));\r\n    \r\n    return predicted;\r\n  }\r\n\r\n  // ===========================================================================\r\n  // ALGORITHM 6: SUM RANGE OPTIMIZATION\r\n  // ===========================================================================\r\n\r\n  generateSumRangePrediction(historicalData) {\r\n    try {\r\n      const sumStats = this.calculateSumStatistics(historicalData);\r\n      const numbers = this.generateNumbersForTargetSum(sumStats);\r\n      const powerball = this.generateSumBasedPowerball(sumStats);\r\n      \r\n      return {\r\n        numbers: numbers.sort((a, b) => a - b),\r\n        powerball: powerball,\r\n        strategy: 'Sum Range Optimization',\r\n        confidence: this.calculatePredictionConfidence('sum', numbers, powerball),\r\n        analysis: 'Sum range optimization based on historical distribution patterns',\r\n        algorithmId: 'sum'\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('Sum range algorithm failed:', error);\r\n      return this.generateRandomPrediction(5);\r\n    }\r\n  }\r\n\r\n  calculateSumStatistics(historicalData) {\r\n    const sums = historicalData\r\n      .filter(d => d.numbers && d.numbers.length === 5)\r\n      .map(d => d.numbers.reduce((a, b) => a + b, 0));\r\n    \r\n    if (sums.length === 0) {\r\n      return {\r\n        mean: 175,\r\n        stdDev: 50,\r\n        min: 75,\r\n        max: 275,\r\n        target: 175\r\n      };\r\n    }\r\n    \r\n    const mean = sums.reduce((a, b) => a + b, 0) / sums.length;\r\n    const variance = sums.reduce((acc, sum) => acc + Math.pow(sum - mean, 2), 0) / sums.length;\r\n    const stdDev = Math.sqrt(variance);\r\n    \r\n    return {\r\n      mean,\r\n      stdDev,\r\n      min: Math.min(...sums),\r\n      max: Math.max(...sums),\r\n      target: mean + (Math.random() - 0.5) * stdDev // Target with some variation\r\n    };\r\n  }\r\n\r\n  generateNumbersForTargetSum(sumStats) {\r\n    const { target, mean, stdDev } = sumStats;\r\n    const numbers = [];\r\n    let currentSum = 0;\r\n    let attempts = 0;\r\n    const maxAttempts = 100;\r\n    \r\n    while (numbers.length < 5 && attempts < maxAttempts) {\r\n      attempts++;\r\n      \r\n      if (numbers.length === 4) {\r\n        // Last number: calculate what we need\r\n        const needed = target - currentSum;\r\n        if (needed >= 1 && needed <= 69 && !numbers.includes(needed)) {\r\n          numbers.push(needed);\r\n          break;\r\n        } else {\r\n          // Start over if we can't reach target\r\n          numbers.length = 0;\r\n          currentSum = 0;\r\n          continue;\r\n        }\r\n      }\r\n      \r\n      const remainingNumbers = 5 - numbers.length;\r\n      const remainingSum = target - currentSum;\r\n      const targetNum = Math.round(remainingSum / remainingNumbers);\r\n      \r\n      // Add some randomness around the target\r\n      const candidate = Math.max(1, Math.min(69, targetNum + Math.floor(Math.random() * 20) - 10));\r\n      \r\n      if (!numbers.includes(candidate)) {\r\n        numbers.push(candidate);\r\n        currentSum += candidate;\r\n      }\r\n    }\r\n    \r\n    // Fallback if we couldn't generate a good set\r\n    if (numbers.length < 5) {\r\n      return this.generateRandomNumbers(5);\r\n    }\r\n    \r\n    return numbers;\r\n  }\r\n\r\n  generateSumBasedPowerball(sumStats) {\r\n    // Use sum statistics to influence powerball selection\r\n    const normalized = (sumStats.target - 75) / (275 - 75); // Normalize to 0-1\r\n    const powerball = Math.max(1, Math.min(26, Math.round(normalized * 26)));\r\n    return powerball;\r\n  }\r\n\r\n  // ===========================================================================\r\n  // ENSEMBLE CREATION & VALIDATION\r\n  // ===========================================================================\r\n\r\n  createEnsemblePredictions(algorithmResults, requestedSets) {\r\n    const predictions = [];\r\n    const resultArray = Object.values(algorithmResults);\r\n    \r\n    // Ensure we have enough algorithm results\r\n    if (resultArray.length === 0) {\r\n      return this.generateFallbackPredictions(requestedSets);\r\n    }\r\n    \r\n    // Use algorithm results in order of their weights\r\n    const sortedAlgorithms = Object.entries(this.algorithmPerformance)\r\n      .sort(([,a], [,b]) => b.weight - a.weight);\r\n    \r\n    for (let i = 0; i < requestedSets; i++) {\r\n      const algorithmIndex = i % resultArray.length;\r\n      const result = resultArray[algorithmIndex];\r\n      \r\n      if (this.validatePrediction(result)) {\r\n        predictions.push({\r\n          ...result,\r\n          id: i + 1,\r\n          ensembleWeight: sortedAlgorithms[algorithmIndex % sortedAlgorithms.length][1].weight\r\n        });\r\n      } else {\r\n        predictions.push(this.generateRandomPrediction(i));\r\n      }\r\n    }\r\n    \r\n    return predictions;\r\n  }\r\n\r\n  validateAndEnhancePredictions(predictions, historicalData) {\r\n    return predictions.map(prediction => {\r\n      // Validate numbers\r\n      if (!this.validatePrediction(prediction)) {\r\n        return this.generateRandomPrediction(prediction.id || 0);\r\n      }\r\n      \r\n      // Enhance with metadata\r\n      const enhanced = {\r\n        ...prediction,\r\n        metadata: this.generatePredictionMetadata(prediction, historicalData),\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      \r\n      // Update algorithm performance\r\n      if (prediction.algorithmId && this.algorithmPerformance[prediction.algorithmId]) {\r\n        this.algorithmPerformance[prediction.algorithmId].totalPredictions++;\r\n      }\r\n      \r\n      return enhanced;\r\n    });\r\n  }\r\n\r\n  validatePrediction(prediction) {\r\n    return prediction && \r\n           prediction.numbers && \r\n           prediction.powerball &&\r\n           isValidPowerballNumbers(prediction.numbers, prediction.powerball) &&\r\n           prediction.numbers.length === 5;\r\n  }\r\n\r\n  generatePredictionMetadata(prediction, historicalData) {\r\n    const sum = prediction.numbers.reduce((a, b) => a + b, 0);\r\n    const evenCount = prediction.numbers.filter(num => num % 2 === 0).length;\r\n    const lowCount = prediction.numbers.filter(num => num <= 35).length;\r\n    \r\n    return {\r\n      sum,\r\n      evenCount,\r\n      oddCount: 5 - evenCount,\r\n      lowCount,\r\n      highCount: 5 - lowCount,\r\n      range: Math.max(...prediction.numbers) - Math.min(...prediction.numbers),\r\n      dataSize: historicalData.length,\r\n      generatedAt: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  // ===========================================================================\r\n  // CONFIDENCE CALCULATION\r\n  // ===========================================================================\r\n\r\n  calculatePredictionConfidence(algorithmId, numbers, powerball) {\r\n    let baseConfidence = 70;\r\n    \r\n    // Adjust based on algorithm performance\r\n    const algorithmPerf = this.algorithmPerformance[algorithmId];\r\n    if (algorithmPerf) {\r\n      baseConfidence += algorithmPerf.successRate * 30;\r\n      baseConfidence = (baseConfidence + algorithmPerf.averageConfidence) / 2;\r\n    }\r\n    \r\n    // Adjust based on number characteristics\r\n    const sum = numbers.reduce((a, b) => a + b, 0);\r\n    if (sum >= 100 && sum <= 250) baseConfidence += 5; // Good sum range\r\n    \r\n    const evenCount = numbers.filter(n => n % 2 === 0).length;\r\n    if (evenCount >= 2 && evenCount <= 3) baseConfidence += 3; // Balanced even/odd\r\n    \r\n    // Add some randomness and cap\r\n    baseConfidence += (Math.random() - 0.5) * 10;\r\n    return Math.min(95, Math.max(65, Math.round(baseConfidence)));\r\n  }\r\n\r\n  // ===========================================================================\r\n  // FALLBACK & UTILITY METHODS\r\n  // ===========================================================================\r\n\r\n  generateFallbackPredictions(count) {\r\n    const predictions = [];\r\n    for (let i = 0; i < count; i++) {\r\n      predictions.push(this.generateRandomPrediction(i));\r\n    }\r\n    return predictions;\r\n  }\r\n\r\n  generateRandomPrediction(index) {\r\n    const numbers = this.generateRandomNumbers(5);\r\n    const powerball = Math.floor(Math.random() * 26) + 1;\r\n    \r\n    return {\r\n      numbers: numbers.sort((a, b) => a - b),\r\n      powerball: powerball,\r\n      strategy: 'Enhanced Random',\r\n      confidence: 70 + Math.floor(Math.random() * 15),\r\n      analysis: 'Statistical random generation with mathematical constraints',\r\n      algorithmId: 'random',\r\n      id: index + 1\r\n    };\r\n  }\r\n\r\n  generateRandomNumbers(count) {\r\n    const numbers = [];\r\n    while (numbers.length < count) {\r\n      const num = Math.floor(Math.random() * 69) + 1;\r\n      if (!numbers.includes(num)) {\r\n        numbers.push(num);\r\n      }\r\n    }\r\n    return numbers;\r\n  }\r\n\r\n  validateHistoricalData(data) {\r\n    return Array.isArray(data) && \r\n           data.length >= 10 && \r\n           data.every(drawing => \r\n             drawing.numbers && \r\n             Array.isArray(drawing.numbers) && \r\n             drawing.numbers.length === 5 &&\r\n             drawing.powerball\r\n           );\r\n  }\r\n\r\n  // ===========================================================================\r\n  // PERFORMANCE MONITORING\r\n  // ===========================================================================\r\n\r\n  updateAlgorithmMetrics() {\r\n    Object.keys(this.algorithmPerformance).forEach(algorithmId => {\r\n      const perf = this.algorithmPerformance[algorithmId];\r\n      \r\n      // Update success rate based on recent hits\r\n      if (perf.recentHits.length > 0) {\r\n        const recentSuccess = perf.recentHits.slice(-this.performanceWindow);\r\n        perf.successRate = recentSuccess.reduce((a, b) => a + b, 0) / recentSuccess.length;\r\n      }\r\n      \r\n      // Adjust weights based on performance\r\n      if (perf.successRate > 0.2) {\r\n        perf.weight = Math.min(0.25, perf.weight * 1.05);\r\n      } else if (perf.successRate < 0.1) {\r\n        perf.weight = Math.max(0.05, perf.weight * 0.95);\r\n      }\r\n    });\r\n  }\r\n\r\n  updatePredictionHistory(predictions) {\r\n    this.predictionHistory.push({\r\n      timestamp: new Date().toISOString(),\r\n      predictions: predictions.map(p => ({\r\n        numbers: p.numbers,\r\n        powerball: p.powerball,\r\n        algorithmId: p.algorithmId,\r\n        confidence: p.confidence\r\n      }))\r\n    });\r\n    \r\n    // Keep only recent history\r\n    if (this.predictionHistory.length > 100) {\r\n      this.predictionHistory = this.predictionHistory.slice(-50);\r\n    }\r\n  }\r\n\r\n  recordActualDrawing(actualNumbers, actualPowerball) {\r\n    // Update algorithm performance based on actual results\r\n    if (this.predictionHistory.length === 0) return;\r\n    \r\n    const lastPredictions = this.predictionHistory[this.predictionHistory.length - 1];\r\n    \r\n    lastPredictions.predictions.forEach(prediction => {\r\n      if (!prediction.algorithmId) return;\r\n      \r\n      const matches = prediction.numbers.filter(num => actualNumbers.includes(num)).length;\r\n      const powerballMatch = prediction.powerball === actualPowerball ? 1 : 0;\r\n      \r\n      // Score: number matches + powerball match\r\n      const score = (matches + powerballMatch) / 6; // 0 to 1 scale\r\n      \r\n      const algorithmPerf = this.algorithmPerformance[prediction.algorithmId];\r\n      if (algorithmPerf) {\r\n        algorithmPerf.recentHits.push(score);\r\n        algorithmPerf.correctPredictions += score;\r\n        \r\n        // Keep only recent hits\r\n        if (algorithmPerf.recentHits.length > this.performanceWindow) {\r\n          algorithmPerf.recentHits = algorithmPerf.recentHits.slice(-this.performanceWindow);\r\n        }\r\n      }\r\n    });\r\n    \r\n    console.log('?? Algorithm performance updated with actual drawing results');\r\n  }\r\n\r\n  getPerformanceReport() {\r\n    return {\r\n      timestamp: new Date().toISOString(),\r\n      algorithms: Object.entries(this.algorithmPerformance).map(([id, perf]) => ({\r\n        id,\r\n        name: perf.name,\r\n        successRate: perf.successRate,\r\n        weight: perf.weight,\r\n        totalPredictions: perf.totalPredictions,\r\n        lastUsed: perf.lastUsed\r\n      })),\r\n      predictionHistory: this.predictionHistory.length,\r\n      isLearning: this.isLearning\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const lotteryPredictor = new LotteryPredictor();\r\n\r\nconsole.log('?? LotteryPredictor service loaded');\r\nconsole.log('?? 6 algorithms ready: EWMA, Neural, Pairs, Gaps, Markov, Sum Range');"],"names":["APP_CONFIG","CLAUDE_CONFIG","LOTTERY_RULES","ALGORITHM_CONFIG","ERROR_MESSAGES","FEATURE_FLAGS","PERFORMANCE_CONFIG","DEBUG_CONFIG","essentialFeatures","feature","f","isValidMainNumber","num","isValidPowerball","isValidPowerballNumbers","numbers","powerball","formatJackpot","amount","formatCurrency","options","formatOptions","formatPercentage","rate","decimals","formatNumbers","a","b","calculateNextDrawing","now","etNow","dayOfWeek","hour","minute","daysOfWeek","drawingTime","nextDrawingDate","found","todayDrawingTime","daysToAdd","checkDate","checkDay","nextDrawingDayName","error","validateHistoricalData","drawings","drawing","validateJackpotData","data","cashValue","ratio","validateApiKey","key","generateQuickPick","getConfidenceClass","confidence","saveToStorage","serializedData","loadFromStorage","defaultValue","item","parsed","shuffleArray","array","newArray","i","j","calculateHistoricalDepth","dates","d","date","earliestDate","latestDate","daysDiff","handleApiError","fallbackMessage","status","createErrorReport","context","logError","report","isModernBrowser","supportsLocalStorage","test","supportsClipboard","compatibility","LotteryPredictor","performance","alg","historicalData","requestedSets","algorithmResults","ensemblePredictions","validatedPredictions","results","fallbackResults","frequencies","powerballFreqs","weightedNumbers","selectedCandidates","weight","candidate","powerballCandidates","numberEWMA","powerballEWMA","index","features","predictions","recent","sum","count","sumTotal","sumCount","recentSums","evenCount","totalNumbers","highCount","mostFrequent","w1","w2","b1","b2","hidden","output","candidates","prob","selected","candidateIndex","randomCandidate","pairFrequencies","pairs","num1","num2","pairKey","usedNumbers","sortedPairs","frequency","n","_a","powerballFreq","topCandidates","selectedIndex","gaps","currentGaps","gapStats","numberGaps","avgGap","overdueNumbers","stats","mostOverdue","moderateOverdue","powerballGaps","maxOverdue","selectedPowerball","transitionMatrix","transitions","current","next","currentNum","nextNum","total","lastDrawing","startNum","selectedCandidate","candidateNum","recentPowerballs","p","avg","variance","sumStats","sums","mean","acc","stdDev","target","currentSum","attempts","maxAttempts","needed","remainingNumbers","remainingSum","targetNum","normalized","resultArray","sortedAlgorithms","algorithmIndex","result","prediction","enhanced","lowCount","algorithmId","baseConfidence","algorithmPerf","perf","recentSuccess","actualNumbers","actualPowerball","matches","powerballMatch","score","id","lotteryPredictor"],"mappings":"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"}