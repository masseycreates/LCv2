{"version":3,"file":"claude-QA-N8Tuv.js","sources":["../../src/services/ClaudeAPI.js"],"sourcesContent":["// LCv2 Claude API Service - AI Integration for Enhanced Predictions\nimport { API_ENDPOINTS, CLAUDE_CONFIG, ERROR_MESSAGES } from '../utils/constants.js';\nimport { validateApiKey, handleApiError } from '../utils/helpers.js';\nimport { lotteryPredictor } from './LotteryPredictor.js';\n\nexport class ClaudeAPI {\n  constructor() {\n    this.apiKey = null;\n    this.baseURL = 'https://api.anthropic.com/v1/messages';\n    this.isEnabled = false;\n    this.retryCount = 0;\n    this.maxRetries = 3;\n    this.hybridMode = true;\n    this.requestCount = 0;\n    this.lastRequestTime = 0;\n    this.rateLimitDelay = 1000; // 1 second between requests\n  }\n\n  // ===========================================================================\n  // INITIALIZATION & AUTHENTICATION\n  // ===========================================================================\n\n  initialize(apiKey) {\n    if (!validateApiKey(apiKey)) {\n      throw new Error(ERROR_MESSAGES.invalidApiKey);\n    }\n    \n    this.apiKey = apiKey;\n    this.isEnabled = true;\n    this.requestCount = 0;\n    \n    console.log('?? Claude Sonnet 4 initialized with hybrid system');\n    console.log('?? API endpoint configured:', this.baseURL);\n  }\n\n  validateApiKey(key) {\n    return validateApiKey(key);\n  }\n\n  disconnect() {\n    this.apiKey = null;\n    this.isEnabled = false;\n    this.requestCount = 0;\n    console.log('?? Claude API disconnected');\n  }\n\n  // ===========================================================================\n  // CONNECTION TESTING\n  // ===========================================================================\n\n  async testConnection() {\n    if (!this.apiKey || !this.isEnabled) {\n      return { \n        success: false, \n        error: ERROR_MESSAGES.apiKeyRequired,\n        status: 'disabled'\n      };\n    }\n\n    try {\n      console.log('?? Testing Claude Sonnet 4 connection...');\n      \n      const testPayload = {\n        model: CLAUDE_CONFIG.model,\n        max_tokens: 100,\n        temperature: 0.3,\n        messages: [{\n          role: 'user',\n          content: 'Hello! Please respond with just \"Connected\" to confirm the API is working.'\n        }]\n      };\n\n      const response = await this.makeAPIRequest(testPayload);\n      \n      if (response.success && response.data.content) {\n        const responseText = response.data.content[0]?.text || '';\n        \n        return {\n          success: true,\n          message: 'Claude Sonnet 4 connection successful',\n          model: CLAUDE_CONFIG.model,\n          responseTime: response.responseTime,\n          usage: response.data.usage\n        };\n      } else {\n        throw new Error(response.error || 'Invalid response format');\n      }\n\n    } catch (error) {\n      console.error('? Claude connection test failed:', error);\n      return {\n        success: false,\n        error: error.message,\n        status: 'error'\n      };\n    }\n  }\n\n  // ===========================================================================\n  // HYBRID SELECTION GENERATION\n  // ===========================================================================\n\n  async generateHybridSelection(params) {\n    if (!this.isEnabled) {\n      throw new Error('Claude API not enabled');\n    }\n\n    const {\n      historicalData,\n      currentJackpot,\n      requestedSets = 5,\n      strategy = 'hybrid',\n      localAlgorithmResults = []\n    } = params;\n\n    try {\n      console.log(`??? Generating ${requestedSets} Claude hybrid selections...`);\n      \n      const prompt = this.buildHybridSelectionPrompt({\n        historicalData,\n        currentJackpot,\n        requestedSets,\n        strategy,\n        localAlgorithmResults\n      });\n\n      const claudePayload = {\n        model: CLAUDE_CONFIG.model,\n        max_tokens: CLAUDE_CONFIG.maxTokens.hybrid,\n        temperature: CLAUDE_CONFIG.temperature,\n        messages: [{\n          role: 'user',\n          content: prompt\n        }]\n      };\n\n      const response = await this.makeAPIRequest(claudePayload);\n      \n\n      if (response.success) {\n        const processedResponse = this.processHybridSelectionResponse(\n          response.data.content[0].text,\n          requestedSets,\n          localAlgorithmResults\n        );\n        \n        return {\n          success: true,\n          data: processedResponse,\n          usage: response.data.usage,\n          model: CLAUDE_CONFIG.model\n        };\n      } else {\n        throw new Error(response.error);\n      }\n\n    } catch (error) {\n      console.error('? Claude hybrid selection failed:', error);\n      return {\n        success: false,\n        error: error.message,\n        fallbackUsed: true\n      };\n    }\n  }\n\n  buildHybridSelectionPrompt(params) {\n    const { historicalData, currentJackpot, requestedSets, localAlgorithmResults } = params;\n    \n    return `You are an advanced lottery analysis AI assistant. I need you to generate ${requestedSets} Powerball lottery number sets by combining mathematical algorithms with AI insights.\n\nPOWERBALL RULES:\n- Select 5 main numbers from 1-69 (no duplicates)\n- Select 1 Powerball number from 1-26\n- Numbers must be realistic and mathematically sound\n\nCURRENT CONTEXT:\n- Current Jackpot: $${currentJackpot?.amount ? (currentJackpot.amount / 1000000).toFixed(0) + 'M' : '100M'}\n- Historical Data: ${historicalData?.totalDrawings || 0} drawings analyzed\n- Analysis Date: ${new Date().toLocaleDateString()}\n\nLOCAL ALGORITHM RESULTS:\n${localAlgorithmResults.map((result, i) => \n  `Algorithm ${i + 1}: ${result.numbers?.join(', ')} | PB: ${result.powerball} (${result.confidence}% confidence)`\n).join('\\n')}\n\nHISTORICAL PATTERNS:\n${historicalData?.hotNumbers ? `Hot Numbers: ${historicalData.hotNumbers.slice(0, 10).map(h => h.number).join(', ')}` : ''}\n${historicalData?.coldNumbers ? `Cold Numbers: ${historicalData.coldNumbers.slice(0, 10).map(c => c.number).join(', ')}` : ''}\n\nTASK:\nGenerate ${requestedSets} optimized Powerball selections that:\n1. Consider the mathematical algorithm results above\n2. Apply AI pattern recognition and intuition\n3. Balance statistical probability with creative insights\n4. Ensure variety across the ${requestedSets} sets\n\nFor each selection, provide:\n- 5 main numbers (1-69)\n- 1 Powerball number (1-26)  \n- Confidence level (65-95%)\n- Brief strategy explanation\n- AI insights or reasoning\n\nFormat your response as a JSON array like this:\n[\n  {\n    \"numbers\": [1, 2, 3, 4, 5],\n    \"powerball\": 1,\n    \"confidence\": 85,\n    \"name\": \"Claude Enhanced Pattern\",\n    \"description\": \"AI-enhanced prediction combining algorithm insights\",\n    \"insights\": \"Key reasoning for this selection\",\n    \"algorithmDetail\": \"Specific mathematical approach used\"\n  }\n]\n\nFocus on quality over quantity. Each selection should be thoughtfully crafted with clear reasoning.`;\n  }\n\n  processHybridSelectionResponse(claudeText, requestedSets, localAlgorithmResults) {\n    try {\n      // Extract JSON from Claude's response\n      const jsonMatch = claudeText.match(/\\[[\\s\\S]*\\]/);\n      \n      if (!jsonMatch) {\n        throw new Error('No valid JSON found in Claude response');\n      }\n\n      const claudeSelections = JSON.parse(jsonMatch[0]);\n      \n      if (!Array.isArray(claudeSelections)) {\n        throw new Error('Invalid JSON format from Claude');\n      }\n\n      // Process and validate Claude's selections\n      const processedSelections = claudeSelections\n        .filter(selection => this.validateClaudeSelection(selection))\n        .slice(0, requestedSets)\n        .map((selection, index) => ({\n          numbers: selection.numbers.sort((a, b) => a - b),\n          powerball: selection.powerball,\n          confidence: Math.min(95, Math.max(65, selection.confidence || 80)),\n          name: selection.name || `Claude Enhanced ${index + 1}`,\n          description: selection.description || 'AI-enhanced prediction',\n          algorithmDetail: selection.algorithmDetail || 'Claude Sonnet 4 analysis',\n          insights: selection.insights || 'Advanced pattern recognition',\n          actualStrategy: 'Claude AI Enhanced',\n          technicalAnalysis: claudeText.substring(0, 200) + '...',\n          claudeGenerated: true,\n          isHybrid: true,\n          source: 'claude-ai'\n        }));\n\n      // If we don't have enough selections, fill with enhanced algorithm results\n      while (processedSelections.length < requestedSets && localAlgorithmResults.length > 0) {\n        const algorithmIndex = processedSelections.length % localAlgorithmResults.length;\n        const algoResult = localAlgorithmResults[algorithmIndex];\n        \n        processedSelections.push({\n          numbers: algoResult.numbers,\n          powerball: algoResult.powerball,\n          confidence: algoResult.confidence || 75,\n          name: `Enhanced ${algoResult.strategy || 'Algorithm'}`,\n          description: 'Mathematical algorithm enhanced by Claude AI context',\n          algorithmDetail: algoResult.analysis || 'Mathematical analysis',\n          insights: 'Fallback from local algorithms',\n          actualStrategy: algoResult.strategy || 'Algorithm',\n          technicalAnalysis: algoResult.analysis || 'Mathematical analysis',\n          claudeGenerated: false,\n          isHybrid: true,\n          source: 'algorithm-fallback'\n        });\n      }\n\n      return {\n        selections: processedSelections,\n        analysis: this.extractAnalysisFromResponse(claudeText),\n        model: CLAUDE_CONFIG.model,\n        timestamp: new Date().toISOString()\n      };\n\n    } catch (error) {\n      console.error('Failed to process Claude response:', error);\n      \n      // Return enhanced algorithm results as fallback\n      return this.createFallbackHybridResponse(localAlgorithmResults, requestedSets);\n    }\n  }\n\n  validateClaudeSelection(selection) {\n    return selection &&\n           Array.isArray(selection.numbers) &&\n           selection.numbers.length === 5 &&\n           selection.numbers.every(n => Number.isInteger(n) && n >= 1 && n <= 69) &&\n           Number.isInteger(selection.powerball) &&\n           selection.powerball >= 1 &&\n           selection.powerball <= 26 &&\n           new Set(selection.numbers).size === 5; // No duplicates\n  }\n\n  extractAnalysisFromResponse(claudeText) {\n    // Extract any analysis text that's not part of the JSON\n    const jsonMatch = claudeText.match(/\\[[\\s\\S]*\\]/);\n    if (!jsonMatch) return claudeText.substring(0, 500);\n    \n    const beforeJson = claudeText.substring(0, jsonMatch.index).trim();\n    const afterJson = claudeText.substring(jsonMatch.index + jsonMatch[0].length).trim();\n    \n    return (beforeJson + ' ' + afterJson).trim().substring(0, 500);\n  }\n\n  createFallbackHybridResponse(localAlgorithmResults, requestedSets) {\n    const fallbackSelections = localAlgorithmResults.slice(0, requestedSets).map((result, index) => ({\n      numbers: result.numbers,\n      powerball: result.powerball,\n      confidence: result.confidence || 75,\n      name: `Enhanced ${result.strategy || `Algorithm ${index + 1}`}`,\n      description: 'Local algorithm with AI enhancement context',\n      algorithmDetail: result.analysis || 'Mathematical analysis',\n      insights: 'Processed through Claude AI framework',\n      actualStrategy: result.strategy || 'Algorithm',\n      technicalAnalysis: result.analysis || 'Mathematical analysis',\n      claudeGenerated: false,\n      isHybrid: true,\n      source: 'algorithm-enhanced'\n    }));\n\n    return {\n      selections: fallbackSelections,\n      analysis: 'Claude AI processing failed, using enhanced algorithm results',\n      model: 'fallback',\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  // ===========================================================================\n  // QUICK SELECTION GENERATION\n  // ===========================================================================\n\n  async generateQuickSelection(params) {\n    if (!this.isEnabled) {\n      throw new Error('Claude API not enabled');\n    }\n\n    const { historicalData, currentJackpot, requestedSets = 3, strategy = 'quick' } = params;\n\n    try {\n      const prompt = this.buildQuickSelectionPrompt({\n        historicalData,\n        currentJackpot,\n        requestedSets,\n        strategy\n      });\n\n      const claudePayload = {\n        model: CLAUDE_CONFIG.model,\n        max_tokens: CLAUDE_CONFIG.maxTokens.quick,\n        temperature: CLAUDE_CONFIG.temperature + 0.1, // Slightly more creative\n        messages: [{\n          role: 'user',\n          content: prompt\n        }]\n      };\n\n      const response = await this.makeAPIRequest(claudePayload);\n      \n      if (response.success) {\n        const processedResponse = this.processQuickSelectionResponse(\n          response.data.content[0].text,\n          requestedSets\n        );\n        \n        return {\n          success: true,\n          data: processedResponse,\n          usage: response.data.usage\n        };\n      } else {\n        throw new Error(response.error);\n      }\n\n    } catch (error) {\n      console.error('? Claude quick selection failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  buildQuickSelectionPrompt(params) {\n    const { historicalData, currentJackpot, requestedSets } = params;\n    \n    return `Generate ${requestedSets} quick Powerball lottery selections using AI analysis.\n\nRULES: 5 numbers (1-69) + 1 Powerball (1-26)\nJACKPOT: $${currentJackpot?.amount ? (currentJackpot.amount / 1000000).toFixed(0) + 'M' : '100M'}\nDATA: ${historicalData?.totalDrawings || 0} historical drawings\n\nUse your AI capabilities to identify patterns and generate mathematically sound selections.\n\nReturn only a JSON array:\n[{\"numbers\": [1,2,3,4,5], \"powerball\": 1, \"confidence\": 80}]`;\n  }\n\n  processQuickSelectionResponse(claudeText, requestedSets) {\n    try {\n      const jsonMatch = claudeText.match(/\\[[\\s\\S]*\\]/);\n      if (!jsonMatch) throw new Error('No JSON found');\n\n      const selections = JSON.parse(jsonMatch[0]);\n      \n      return {\n        selections: selections\n          .filter(s => this.validateClaudeSelection(s))\n          .slice(0, requestedSets)\n          .map((s, i) => ({\n            ...s,\n            numbers: s.numbers.sort((a, b) => a - b),\n            name: `Claude Quick ${i + 1}`,\n            claudeGenerated: true\n          })),\n        timestamp: new Date().toISOString()\n      };\n\n    } catch (error) {\n      return this.generateFallbackQuickSelections(requestedSets);\n    }\n  }\n\n  // ===========================================================================\n  // PREDICTION INSIGHTS\n  // ===========================================================================\n\n  async generatePredictionInsights(params) {\n    if (!this.isEnabled) {\n      throw new Error('Claude API not enabled');\n    }\n\n    const { predictionSet, historicalContext } = params;\n\n    try {\n      const prompt = this.buildInsightsPrompt(predictionSet, historicalContext);\n\n      const claudePayload = {\n        model: CLAUDE_CONFIG.model,\n        max_tokens: CLAUDE_CONFIG.maxTokens.insights,\n        temperature: 0.3,\n        messages: [{\n          role: 'user',\n          content: prompt\n        }]\n      };\n\n      const response = await this.makeAPIRequest(claudePayload);\n      \n      if (response.success) {\n        return {\n          success: true,\n          data: {\n            insights: response.data.content[0].text,\n            analysis: this.extractKeyInsights(response.data.content[0].text),\n            timestamp: new Date().toISOString()\n          },\n          usage: response.data.usage\n        };\n      } else {\n        throw new Error(response.error);\n      }\n\n    } catch (error) {\n      console.error('? Claude insights generation failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  buildInsightsPrompt(predictionSet, historicalContext) {\n    return `Analyze this Powerball prediction and provide insights:\n\nPREDICTION: ${predictionSet.numbers.join(', ')} | Powerball: ${predictionSet.powerball}\nSTRATEGY: ${predictionSet.strategy}\nCONFIDENCE: ${predictionSet.confidence}%\n\nHISTORICAL CONTEXT:\n- Total drawings analyzed: ${historicalContext.totalDrawings}\n- Recent trends: ${historicalContext.recentTrends || 'Standard patterns'}\n\nProvide a brief analysis covering:\n1. Mathematical soundness of the selection\n2. Pattern recognition insights\n3. Statistical probability assessment\n4. Strategic reasoning\n\nKeep the response concise (2-3 paragraphs) and focused on actionable insights.`;\n  }\n\n  extractKeyInsights(insightsText) {\n    // Extract key points from Claude's insights\n    const sentences = insightsText.split(/[.!?]+/).filter(s => s.trim().length > 10);\n    \n    return {\n      summary: sentences[0]?.trim() || 'AI analysis completed',\n      keyPoints: sentences.slice(1, 4).map(s => s.trim()).filter(s => s.length > 0),\n      recommendation: sentences[sentences.length - 1]?.trim() || 'Consider mathematical patterns'\n    };\n  }\n\n  // ===========================================================================\n  // API REQUEST HANDLING\n  // ===========================================================================\n\n  async makeAPIRequest(payload) {\n    // Rate limiting\n    await this.enforceRateLimit();\n    \n    const startTime = performance.now();\n    \n    try {\n      const response = await fetch(this.baseURL, {\n        method: 'POST',\n        headers: {\n          'x-api-key': this.apiKey,\n          'anthropic-version': CLAUDE_CONFIG.version,\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      const responseTime = performance.now() - startTime;\n      this.requestCount++;\n      this.lastRequestTime = Date.now();\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n        \n        try {\n          const errorData = JSON.parse(errorText);\n          if (errorData.error && errorData.error.message) {\n            errorMessage = errorData.error.message;\n          }\n        } catch (e) {\n          // Keep original error if not JSON\n        }\n        \n        throw new Error(errorMessage);\n      }\n\n      const data = await response.json();\n      \n      return {\n        success: true,\n        data,\n        responseTime,\n        requestCount: this.requestCount\n      };\n\n    } catch (error) {\n      console.error('Claude API request failed:', error);\n      return {\n        success: false,\n        error: handleApiError(error),\n        responseTime: performance.now() - startTime\n      };\n    }\n  }\n\n  async enforceRateLimit() {\n    const timeSinceLastRequest = Date.now() - this.lastRequestTime;\n    if (timeSinceLastRequest < this.rateLimitDelay) {\n      const delay = this.rateLimitDelay - timeSinceLastRequest;\n      console.log(`? Rate limiting: waiting ${delay}ms...`);\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n\n  // ===========================================================================\n  // FALLBACK METHODS\n  // ===========================================================================\n\n  generateFallbackQuickSelections(count) {\n    const selections = [];\n    \n    for (let i = 0; i < count; i++) {\n      const numbers = [];\n      while (numbers.length < 5) {\n        const num = Math.floor(Math.random() * 69) + 1;\n        if (!numbers.includes(num)) {\n          numbers.push(num);\n        }\n      }\n      \n      selections.push({\n        numbers: numbers.sort((a, b) => a - b),\n        powerball: Math.floor(Math.random() * 26) + 1,\n        confidence: 70 + Math.floor(Math.random() * 15),\n        name: `Fallback Quick ${i + 1}`,\n        claudeGenerated: false\n      });\n    }\n    \n    return {\n      selections,\n      timestamp: new Date().toISOString(),\n      fallback: true\n    };\n  }\n\n  // ===========================================================================\n  // STATUS & DIAGNOSTICS\n  // ===========================================================================\n\n  getStatus() {\n    return {\n      isEnabled: this.isEnabled,\n      model: CLAUDE_CONFIG.model,\n      requestCount: this.requestCount,\n      lastRequestTime: this.lastRequestTime,\n      rateLimitDelay: this.rateLimitDelay,\n      maxRetries: this.maxRetries,\n      hybridMode: this.hybridMode\n    };\n  }\n\n  getDiagnostics() {\n    return {\n      status: this.isEnabled ? 'enabled' : 'disabled',\n      model: CLAUDE_CONFIG.model,\n      version: CLAUDE_CONFIG.version,\n      features: ['hybridSelection', 'quickSelection', 'predictionInsights'],\n      requestCount: this.requestCount,\n      lastRequestTime: this.lastRequestTime ? new Date(this.lastRequestTime).toISOString() : null,\n      configuration: {\n        maxTokens: CLAUDE_CONFIG.maxTokens,\n        temperature: CLAUDE_CONFIG.temperature,\n        rateLimitDelay: this.rateLimitDelay\n      }\n    };\n  }\n\n  // ===========================================================================\n  // CONFIGURATION\n  // ===========================================================================\n\n  setRateLimit(delayMs) {\n    this.rateLimitDelay = Math.max(500, delayMs); // Minimum 500ms\n    console.log(`?? Claude API rate limit set to ${this.rateLimitDelay}ms`);\n  }\n\n  enableHybridMode(enabled = true) {\n    this.hybridMode = enabled;\n    console.log(`?? Claude hybrid mode ${enabled ? 'enabled' : 'disabled'}`);\n  }\n\n  resetRequestCount() {\n    this.requestCount = 0;\n    console.log('?? Claude API request count reset');\n  }\n}\n\n// Create and export singleton instance\nexport const claudeAPI = new ClaudeAPI();\n\nconsole.log('?? ClaudeAPI service initialized');\nconsole.log(`?? Model: ${CLAUDE_CONFIG.model}`);\nconsole.log(`?? Features: Hybrid Selection, Quick Selection, Prediction Insights`);"],"names":["ClaudeAPI","apiKey","validateApiKey","ERROR_MESSAGES","key","testPayload","CLAUDE_CONFIG","response","responseText","_a","error","params","historicalData","currentJackpot","requestedSets","strategy","localAlgorithmResults","prompt","claudePayload","result","i","h","c","claudeText","jsonMatch","claudeSelections","processedSelections","selection","index","a","b","algorithmIndex","algoResult","n","beforeJson","afterJson","s","predictionSet","historicalContext","insightsText","sentences","_b","payload","startTime","responseTime","errorText","errorMessage","errorData","handleApiError","timeSinceLastRequest","delay","resolve","count","selections","numbers","num","delayMs","enabled","claudeAPI"],"mappings":"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"}